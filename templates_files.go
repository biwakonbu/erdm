// Code generated by go-bindata.
// sources:
// templates/dot.tmpl
// templates/dot_relations.tmpl
// templates/dot_tables.tmpl
// templates/html.tmpl
// templates/pg_ddl.tmpl
// templates/sqlite3_ddl.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\x80\xe1\xbd\xd0\x77\x38\x32\x97\xd2\x51\x90\x4c\x6e\x15\x45\x70\x14\x91\x94\xbb\x36\x81\xf4\xae\x34\x27\x28\x21\xef\x2e\x45\x9c\x9c\xff\x1f\xbe\x9c\x91\xc6\xc0\x04\x06\x45\x4d\x29\x75\x85\x61\x5a\xdd\xe2\x61\x82\x5c\x57\x00\x2c\x48\x70\x4b\xde\x2d\x64\x07\x79\x35\x49\xdf\x91\xec\x2a\x4f\x46\xc2\xc6\x53\x98\xbc\xda\xae\xed\x76\xcd\x28\xac\xec\x66\xb2\xe6\x2c\x2a\x70\x75\x9c\xe0\x24\x2c\x70\xe8\x8f\xd0\x5f\xcc\x7d\x5f\x57\x39\x2b\xcd\x4b\x74\xfa\x05\x1f\xea\x86\x48\xc9\x40\xbb\xc9\xff\x79\xa5\xe8\x34\x08\xff\x8e\xb2\x2d\xc4\x58\xca\x27\x00\x00\xff\xff\xe0\xa7\x69\xb5\xb8\x00\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 184, mode: os.FileMode(438), modTime: time.Unix(1496322822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcf\x4a\x03\x31\x10\xc6\xef\x85\xbe\xc3\x47\xd8\xc3\x2e\xb8\x79\x00\xa1\x5e\xaa\x57\x0f\xb5\xe0\x41\x44\xa6\x66\xda\x06\xd3\x09\x64\x67\x11\x09\x79\x77\x49\x77\xc1\x16\x84\x5e\x92\xf0\x23\xbf\x6f\xfe\xe4\xec\x78\xef\x85\x61\x5c\xd4\x8f\xc4\x81\xd4\x47\x19\x4c\x29\xcb\x45\xce\x3d\x12\xc9\x81\xd1\x7c\xdd\xa1\x51\xdc\xaf\x60\xb7\xb4\x0b\x3c\xa0\xbf\xfe\x60\xd7\x31\x8c\x27\xb9\xe0\x7e\x8f\x96\xc4\xa1\x15\x86\xdd\xcc\xb9\x93\xfd\x4c\x27\xde\x30\x05\x18\xd3\xa1\x95\xa8\xb0\xaf\x5e\x8f\x71\xd4\xa7\xe4\xba\x0e\x35\x62\xb9\x00\xd8\x1d\x18\x6f\xf5\x05\x50\x4a\xf1\xfb\xc8\xe4\xb0\x82\x91\x28\x6c\x26\x5e\x51\xa0\x1d\x87\xca\x73\xfe\xab\xb4\xa6\xe4\xbc\x50\xf0\xfa\xf3\x12\xc7\xf4\xc9\xa5\xcc\x8a\x92\x0f\xb7\x94\x47\x1e\xd4\xcb\x19\xcf\xde\x7b\x3d\x72\x6e\xd4\x6e\xbd\x86\x73\xff\xa5\xa0\x7f\xc0\x65\xc2\xd5\x78\xd3\x26\x58\x5c\x29\xff\x5e\xbf\x01\x00\x00\xff\xff\xb8\xff\xfa\xf2\x7b\x01\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 379, mode: os.FileMode(438), modTime: time.Unix(1496316205, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x5d\x8b\xd4\x30\x14\x86\xef\x05\xff\xc3\x21\xcc\xc5\x0e\xd8\x8e\x78\xa9\x6d\x41\xc5\x85\x22\x0c\xcb\xb2\x8b\x17\x22\x92\x69\x4e\x6b\xf0\x4c\x32\xa6\xe9\x68\x09\xf9\xef\x92\xb4\x9d\xc9\x8c\x1f\x7b\x13\x48\x72\xde\xf7\x3c\xe7\xc3\x39\x81\xad\x54\x08\x4c\x68\xfb\xd5\xf2\x1d\x61\xcf\xbc\x7f\xfe\xcc\x39\xc3\x55\x87\xb0\xb2\xdf\x5f\xc0\xca\xc2\xeb\x12\xf2\x87\xf8\x1d\x7e\x01\x9c\xcb\x1f\xa4\x25\xbc\x47\x4e\xde\xc3\x67\xe2\x3b\x24\x28\xa1\x28\xa2\x09\xec\xb4\x11\x68\x4a\xf6\x92\x41\x83\x44\x57\xd7\x03\x17\x42\xaa\x2e\xdc\xab\xe0\x06\x50\x58\x53\x15\x56\x40\xa3\xa9\x3f\x70\x55\xb2\x57\xac\x2a\x5a\xad\x2c\xb4\xbc\xc1\x92\xdd\xcb\xc6\x8e\xd9\x3b\x4d\x62\x51\x38\x97\x81\x6c\x41\x21\x4c\x24\xc0\x98\xf7\x0b\x96\xf7\x1b\xe7\x50\x89\xf3\x4b\x00\x85\x6c\x82\x07\x28\x36\xc1\xbb\x2a\x36\x56\x84\xc3\x24\x9e\x73\xdd\xa1\xec\x26\x96\xfd\x5e\xd3\xb0\x57\xfd\x22\x9d\xf3\xde\x28\x6d\x21\xff\x24\xed\x37\x3d\xd8\x0f\x46\xac\x13\xf3\xb9\x16\x4e\xb2\x53\x25\x23\x6c\xed\x13\xd0\x19\xfc\x0f\xdb\xfb\xa9\xdf\xe3\x01\xbd\x07\xe7\x42\x76\xae\xc4\x8c\xf0\x96\x48\xff\xdc\x0e\x44\x6b\xc8\xeb\xfe\x51\xc9\x1f\x03\x26\x30\x37\x8f\xdb\xed\xfa\x9c\x1c\xa9\xc7\x48\x70\x21\x4d\xc2\xff\x1a\x7d\x32\x4e\x7d\xd3\xb8\x80\x3c\x35\xd3\x8a\x2a\x12\xe6\x75\x7f\x67\xe4\x9e\x9b\xf1\x23\x8e\x67\xd9\xdd\x95\x68\x89\xbd\xd5\x06\x65\xa7\x2e\x62\x6f\xff\x95\xe0\x8f\x61\xc9\x30\x2d\x79\x8c\xe3\xaa\x95\xc0\x5f\xf1\x08\xbb\x5a\x3b\xb7\x92\xc7\xd8\xb6\xc4\x23\x4c\xfc\xd4\xe8\xe5\x3d\xec\x6d\x55\x7d\x79\x13\x96\x3f\xfd\xfa\x1d\x00\x00\xff\xff\x09\xa5\x8b\xe1\x24\x03\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 804, mode: os.FileMode(438), modTime: time.Unix(1496316205, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\xbe\x11\x7f\x9f\x4f\xc1\xf1\x1f\xd4\x09\x10\x53\x4d\xb2\xa2\xab\x23\x7b\x18\x92\x15\x0b\x1a\x64\x5d\x9b\xbc\x2a\x82\x80\xa6\x68\x8b\x29\x45\xaa\x24\xe5\xc4\xd0\xf4\xdd\x07\x92\x92\x1f\x25\x3f\xc4\x69\x56\x74\x7b\x65\x89\x3a\xde\xfd\xee\x91\x77\x92\xf3\x3c\xa2\x03\x26\x28\x80\xb1\x49\x38\x04\xed\xa2\xd8\x0b\xff\x14\x49\x62\xc6\x29\x05\x76\xad\xb7\x17\xda\x1f\xc0\xb1\x18\x76\xe1\x03\x86\xbd\x3d\x00\x00\x08\x63\x8a\x23\x7f\xe9\x6e\x35\x51\x2c\x35\x40\x2b\xd2\x85\xb1\x31\xa9\xee\x04\x01\x7e\xc0\x4f\x68\x28\xe5\x90\x53\x9c\x32\x8d\x88\x4c\xdc\x5a\xc0\x59\x5f\x07\x8f\xb4\x3f\x90\xc2\x04\xc7\xe8\x1d\x3a\xad\xee\xd0\x83\x86\xbd\x30\xf0\xdc\x66\xd8\x73\x26\xbe\x03\x45\x79\x17\x6a\x33\xe6\x54\xc7\x94\x1a\x08\x62\x45\x07\x53\x71\x09\x7e\x22\x91\x40\x7d\x29\x8d\x36\x0a\xa7\xf6\xc6\x8a\x9c\x2c\x04\xa7\xe8\x14\xbd\x0f\x88\xd6\xd3\x35\x94\x30\x81\x88\xd6\x70\x46\x58\x42\x0d\x06\x24\xc6\x4a\x53\xd3\x85\xb7\x37\x1f\xdb\x7f\xa9\xb4\x0e\xa6\x6a\x87\x7d\x19\x8d\x81\x18\xb6\x71\x9a\x76\x21\x4e\xd3\x59\x16\x11\x1b\xd9\x47\x44\x0a\xa3\x24\xe7\x54\x75\xe1\x0d\xee\x73\x7a\x3e\x59\x98\xa1\x9e\xec\x20\x1c\x6b\xdd\x85\x76\x17\x66\x82\xaa\xf6\x80\x67\x2c\x5a\xa0\x5c\xa4\x16\x78\xd4\xc7\x0a\xf8\x9f\x36\x13\x23\xaa\x34\x85\x40\x49\x4e\xdd\x43\x36\xc4\x86\x49\x51\xc3\xa5\x9e\x53\xbb\xaf\xb0\x88\x60\x2f\xcf\x61\x9e\x53\x15\x21\x81\x13\x5a\x14\xb0\x28\xc2\x20\x62\xa3\x8d\xd9\x10\xc9\x39\x4e\x35\x05\xd5\x45\x03\x02\xb7\x7d\x20\x55\xb2\xb0\xdf\x2d\x95\xd7\x8a\x0d\x63\xb3\x62\xbf\xe3\xc1\x44\x9a\x19\x60\x03\xb7\x0b\x0d\x7d\x32\xd0\x7a\x20\x91\x91\x8d\x9a\xef\x74\xfc\x28\x55\x04\x41\xca\x31\xa1\xb1\xe4\x91\x75\xc9\x57\x8a\x15\x89\x11\x42\xb0\x92\x6d\x85\x56\x5e\x83\xc1\x0a\xc0\x81\xa5\x6c\xb0\x45\xbd\x99\x6a\x96\xeb\x96\x9e\x1d\x07\x4a\x3e\x6e\xe0\x63\x22\x79\x3b\x89\xda\xa7\x40\xb3\x88\xf6\xf1\x62\x18\xce\x6d\xcb\xf8\x8c\x4b\xac\x2b\xda\xeb\x37\x01\x9f\xad\xd6\xf4\x8a\xa6\x14\x9b\x2e\x34\x36\xf0\x01\x13\xc0\x5d\x5c\x31\x6d\xc0\xbf\xc1\x80\x71\x43\x55\xa7\xf2\x4b\x2f\xc4\x65\x36\xff\xe1\xa8\xda\x2e\xfa\xdc\xe5\x34\xfe\xca\x98\x5c\x58\x0d\x03\xdc\x0b\x03\xce\x56\x39\x2b\xe3\x5b\xb9\xaa\xc1\x68\x1f\x56\x19\x2b\x3e\xe9\xfd\xfd\xcb\x45\x18\xc4\x27\x2b\x88\x58\x32\xf4\x25\x32\xcf\xd1\x65\x82\x87\xf4\x23\xe3\xb4\xd4\x04\x3c\xb2\xc8\xc4\x5d\xf8\xe1\xed\xdb\xf4\x69\x65\xec\xc5\x27\x3d\x57\x4c\x80\xb5\xe5\x1a\x89\x33\x5a\x78\xc3\x2a\xaa\x53\x29\x34\x1b\xd9\xc4\x2c\xe3\x6b\x9d\x3f\xbd\x07\xb7\x74\xe9\x9c\x58\x4f\xd8\xee\x4b\x15\x51\x45\xeb\x42\x79\x59\xa8\xad\xaf\xeb\xe9\x3c\xad\xda\x8c\xd0\x13\x47\x9b\x13\x83\xa9\xfa\x35\xea\x68\xa3\x58\x4a\xa3\xed\x95\x5b\x16\xb1\xb9\xb2\xcb\x7b\x55\x85\x4d\x67\x84\xd0\xb9\xb3\x6c\x7b\x66\x71\x19\x5b\xd7\x38\xa1\x07\x57\x72\xc8\x08\xe6\x87\x61\x60\xe2\x17\x63\xfa\x39\x1e\xeb\x1d\xb9\x86\xc1\x36\x1e\x9f\xc7\xf2\xcc\x8d\xa0\x0c\x9d\x99\x12\xc4\xbd\x75\xee\x67\x4a\xd1\xb6\xb1\xb5\xc8\x3d\xc4\xc0\x72\xab\x92\x75\xdb\x2a\xf8\x5c\xf1\xcf\xb3\x67\x18\x3c\x23\x6c\xc3\xc0\x21\xff\x5d\x53\x90\x89\x81\xdc\x31\xff\xce\x25\xcf\x12\xe1\x72\x25\xec\xab\xa0\xf7\x82\x59\xb8\xc4\xfa\x05\x72\xb1\xe2\x7d\x33\x4e\xe9\xee\x5c\x3e\x7f\xda\x9d\xc7\xf5\x3f\x6f\x9c\x76\xd7\xb7\x57\x57\xbb\x73\xbb\xbd\xbe\xfc\xd7\xee\x5c\x3e\xbe\x80\x5e\x17\x74\x80\x33\x6e\x5e\x22\x0c\x92\x84\x8a\x1d\x18\xed\x54\x7f\x67\x1b\x09\xe2\x03\xb2\xea\x24\x90\xbf\xbf\xe7\x4c\xaf\x6b\xf7\x57\x0b\x89\x80\x9b\x13\xbb\xf0\x31\x66\x86\xb6\x75\x8a\x09\xed\x00\x21\x1f\x15\x4e\xcf\xca\x0a\xea\x65\xfd\x84\x2a\xbe\xb9\xec\xff\x86\x4c\x3b\x20\xbd\xac\x4c\x3b\x6c\xb5\x31\x67\x43\xd1\x01\x84\x0a\x43\xd5\x82\x48\xa6\xef\xd3\xef\x74\x0c\xfe\x0a\x5a\x6f\xfe\xf8\xf0\xfe\xcf\xef\xce\x5a\xa0\x03\x5a\xad\xd7\x87\x21\x32\xce\x2d\x0c\x27\xbf\xc2\xf2\xfa\x30\x32\xc1\x7e\x64\xf4\x27\xdb\xa3\x3e\x14\x42\x9d\x62\x61\x53\x90\x0d\xaa\xf4\x43\x8a\x72\xf7\x8e\xe0\xde\x25\x21\xec\xb5\xdf\x0c\xcd\x59\xed\x44\x56\xbb\x61\xb6\x2d\x69\x26\xf0\x1d\x8a\x95\xbe\x43\xa3\xb2\x91\x8a\xb3\x40\x22\x5f\x33\x5f\xd5\xb2\xd3\xe2\xe6\xca\xac\xad\x6e\x25\x9a\x72\xa5\xac\x6f\x25\x4e\xb7\xe4\x01\xda\x53\x6b\x67\x1b\xfd\xbf\x99\xfb\x85\x9a\xb9\x4b\x11\xd1\x27\xdf\x70\xbd\x54\xf7\xe6\xa7\xfe\x9d\xdb\x1a\xc1\x7e\xfc\x4e\x9d\x04\x73\x86\x9e\x34\x12\xee\xf6\x75\xfa\x08\x27\x0a\x19\x66\xf8\xeb\x9d\xe5\x5e\xa6\xaf\x2a\xfa\xb5\xce\x2f\x2f\xf4\x17\x39\xbe\x6a\x8a\x6c\x65\x94\xff\xf1\x1a\xbb\xb9\x56\x9b\x69\xb1\x11\xea\xb5\x28\x57\xbd\x6a\x7d\xee\x0b\xf3\xc5\xdb\xed\x3f\x42\x61\x31\xcc\x38\x56\x0f\x3a\x38\x46\x27\xe8\xf4\xa4\x5a\x70\x9f\x85\x1a\xbe\x45\x95\x52\xa6\x1f\x1a\x82\x07\x3c\xc2\x7e\x75\xa1\xd8\x4c\xb8\xc9\x28\xe3\xf4\xa0\x85\xd3\xb4\x75\x04\xbe\xdd\x1d\xce\x51\xa1\xe9\x67\xa2\x83\xd6\xc2\x67\x22\x4b\xde\xda\xd7\x44\xa6\xb4\x75\x04\x06\x99\x20\xb6\xad\x02\x07\x7e\xe9\x10\xe4\x4b\x66\xf3\x4f\xd0\xf4\xcd\x6c\x17\x7c\x5b\x22\xca\xf3\x36\x50\x58\x0c\x29\xd8\x67\x47\x60\xdf\x80\x4e\x17\x20\x27\x5a\x17\x45\x8d\x93\x72\x68\x47\x15\xd8\x01\x30\xcf\xf7\x0d\xba\xb1\xc5\xee\x0b\xc5\xbc\x28\xe0\x51\x9d\x4f\xe1\xec\x54\x35\xbf\xad\x71\xcb\x4c\xc9\xee\xd4\x40\x5e\x40\x6d\x61\xb3\x91\xc5\xbd\x6f\x90\x3b\x65\x1b\xa0\x83\x1c\xba\xda\x5c\xa2\x60\xa3\x35\x30\xca\xa2\xea\xc9\x27\xd2\x88\x93\xc4\x46\xe8\xbc\xaa\xb9\x96\x17\x23\x45\x61\x61\x51\x11\x35\xab\x55\xd5\xcb\x29\x80\x4b\x7d\xeb\x56\x6c\x41\xaa\xdd\x54\x72\xac\x7b\x74\xb7\x0a\xf5\xa6\xd6\x23\xd6\x7a\xa4\x34\xde\x44\xa3\xda\xe4\x9c\xf3\x3c\x59\xef\xf9\x7a\xdf\x93\xd5\x46\x07\x00\xda\x74\x9a\x12\xfb\x19\xb5\x89\xb6\x9c\x27\x61\x07\x38\xea\x4b\xfd\x59\xb1\x04\xab\xf1\x27\x3a\x2e\xea\x0d\xba\xe0\x87\x72\x5b\xe5\x85\xa3\x3c\x67\x03\x80\xfe\x81\x75\xf9\x8a\xe5\x2b\x35\x86\x89\x61\x83\x49\x00\x2c\xa7\x8a\x09\xde\x8b\xc9\x94\x71\xb4\xc2\x75\x1e\x84\x1d\x41\x2b\x08\x7f\xe3\x5c\x3e\x5e\x67\x9c\xcf\x62\xf8\x52\xce\x4e\x8d\x4c\x26\xc3\xd5\x40\xc9\x64\x82\xa1\xda\x86\xce\xb1\x8a\x98\xc0\x9c\x99\xf1\x57\x99\x29\xb2\xca\x92\xd3\x39\x4d\xae\x64\x74\x41\xb5\x61\xa2\x84\xb5\x01\x37\x37\x47\x2e\x31\x74\x05\xc6\xf6\xc2\x55\x00\x95\xc6\x9a\xa8\x7e\x5e\x1d\xd4\x0d\x02\xe6\xce\xf6\x86\x30\x9f\x0f\x74\x1f\xe9\x3e\xd4\x09\x2a\xf9\xdb\x8e\xc9\x22\x23\xee\xd7\x41\xb8\x2b\x7f\x9b\xc2\xa7\x22\x2b\x2a\xcc\x77\x67\x7b\x4d\xa5\x97\xaa\x08\x74\x6b\x2a\xb3\x53\x61\x9a\x14\x93\x94\x58\x22\x2c\xce\xe6\x96\x8a\x79\x49\x77\x87\x67\x33\x27\x60\xd3\xf1\xb4\xc5\x21\xf8\xf0\x23\xa3\x6a\x1c\x1c\xa3\xe3\x63\x74\x5c\xde\x6d\x70\x00\xce\x49\xd8\xe4\xcf\x17\x27\xe8\x6d\xf0\xb0\xf8\xdf\x8b\x65\x19\x61\xe0\xdb\x8d\x30\xf0\xff\x3f\x29\x0d\xfe\x9f\x00\x00\x00\xff\xff\x0e\xd7\xaa\xdb\xab\x22\x00\x00")

func templatesHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlTmpl,
		"templates/html.tmpl",
	)
}

func templatesHtmlTmpl() (*asset, error) {
	bytes, err := templatesHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html.tmpl", size: 8875, mode: os.FileMode(438), modTime: time.Unix(1496323955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPg_ddlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xea\x40\x10\x7d\x17\xfc\x0f\x83\xe4\x41\xc1\x9b\x1f\x70\xe5\x3e\xe4\x26\xab\x0d\xa6\xd1\xe6\x03\xf4\xa9\xa4\xc9\x28\x0b\xeb\x6a\xcd\x86\x2a\xcb\xfc\xf7\xb2\x9b\x68\x53\xfa\xf1\x16\x32\xe7\x9c\x39\xe7\xcc\x6a\x5d\xe1\x8e\x4b\x84\xd1\x69\xff\x5c\x55\x62\x04\x7f\x88\x86\x03\xad\xcf\x85\xdc\x23\x38\x8a\x4f\xc1\x51\xf0\xf7\x1f\xb8\x59\xf1\x22\xb0\x6e\xe7\x41\xb2\x5a\x43\xe6\xfd\x8f\x18\x84\x73\x60\x9b\x30\xcd\x52\xd0\xda\x51\x6e\xc6\x95\xc0\x04\x0b\x41\x04\xbe\x97\xfa\x5e\xc0\x66\x46\x0f\x65\xf5\xbb\xb0\x99\xfa\x09\xf3\x32\xd6\x09\x7f\x91\x1b\xf7\xe8\xa5\xa1\x97\x96\xee\x1f\x45\x73\x90\x35\x11\x00\x18\x52\xf9\x89\xd4\xfe\xb8\x9e\x90\x48\x6b\xbe\x03\xa7\x74\xc3\x3a\x97\xfc\xb5\x41\x22\xc8\xe3\xf0\x29\x67\x9d\x3b\x3b\x97\x47\x65\x30\x9e\x10\xc7\xb7\xb8\x11\x46\x22\x5e\x65\x10\xe7\x51\xd4\x87\x39\xa5\xfb\x50\xd4\x01\xee\x8a\x46\xa8\x14\x95\xe2\x72\x4f\x04\x01\x9b\x7b\x79\x94\xb5\x5b\xbb\xa9\x61\x58\xe2\xb4\xd7\x83\xf1\xba\x4e\xc2\x47\x2f\xd9\xc2\x92\x6d\x61\x6c\xd3\x2e\x50\xad\xcf\xfc\x50\x9c\xaf\x4b\xbc\xde\x73\x4d\x86\x83\xc9\xac\x97\x9d\x9b\xec\xbc\xba\x98\xf4\x8e\x72\x43\x59\xe1\xe5\x76\x98\xb6\xc1\xd6\x22\xaf\x2e\x3f\x66\x85\x30\x0e\xd8\xc6\xf8\x34\x28\x5b\x18\x11\xac\xe2\x6f\x5a\xef\x30\x0b\x54\x76\xd3\x87\xad\xdb\x5d\x6f\x4f\xe6\x7e\x62\xfb\xf1\x1e\x00\x00\xff\xff\xba\x44\xdb\x58\x5a\x02\x00\x00")

func templatesPg_ddlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPg_ddlTmpl,
		"templates/pg_ddl.tmpl",
	)
}

func templatesPg_ddlTmpl() (*asset, error) {
	bytes, err := templatesPg_ddlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pg_ddl.tmpl", size: 602, mode: os.FileMode(438), modTime: time.Unix(1487831781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqlite3_ddlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x4e\xc2\x40\x10\xbd\xf7\x2b\x26\xa4\x07\x48\xb0\x17\x6f\x12\x0f\x95\x2e\xd8\x50\x0b\x96\x36\x81\x93\xa9\xed\x40\x36\x59\x16\xa1\xdb\x08\xd9\xcc\xbf\x9b\xdd\xae\xa0\x46\x3d\x35\xe9\xbc\xf7\xe6\xbd\x37\xab\x75\x8d\x1b\x2e\x11\x7a\xcd\x41\x70\x85\xb7\x2f\x75\x2d\x7a\x70\x43\xe4\x69\x7d\x2c\xe5\x16\xc1\x57\x7c\x08\xbe\x82\xbb\x7b\x08\xf2\xf2\x55\x60\x63\xc7\x51\x36\x5f\x40\x1e\x3e\x24\x0c\xe2\x09\xb0\x55\xbc\xcc\x97\xa0\xb5\xaf\x82\x9c\x2b\x81\x19\x96\x82\x68\xe4\x69\x8d\xb2\xfe\x57\x8d\xc8\x1b\x67\x2c\xcc\x99\x53\xfb\xa9\x01\xfd\x2b\xb9\x32\xe4\xca\x92\xc7\x7b\xd1\xee\x64\x43\x04\x00\x86\x53\x7d\xe3\x74\x3f\xce\x6f\x48\xa4\x35\xdf\x80\x5f\x05\x71\x53\x48\x7e\x68\x91\x08\x8a\x34\x7e\x2e\x98\xb3\x66\xe7\x72\xaf\x0c\x26\x14\x62\xff\x9e\xb6\xc2\x48\xa4\xf3\x1c\xd2\x22\x49\xbe\xc2\xfc\x2a\x78\x2c\x9b\x08\x37\x65\x2b\xd4\x12\x95\xe2\x72\x4b\x04\x11\x9b\x84\x45\x92\x77\x5b\xdd\xd4\x30\x2c\x71\x78\xe9\xc0\x38\x5d\x64\xf1\x53\x98\xad\x61\xc6\xd6\xd0\xb7\x51\xa7\xa8\x16\x47\xbe\x2b\x8f\xe7\x19\x9e\x2f\xa9\x06\xde\x60\x74\xcd\xcd\x4d\x6e\x5e\x9f\x4c\x72\x5f\x05\xb1\xac\xf1\xe4\xee\xd0\x75\xd7\xb9\xe3\xf5\xe9\xcf\x98\x10\xa7\x11\x5b\x19\x8b\x06\x65\xbb\x22\x82\x79\xfa\x4b\xdf\x0e\x33\x45\x65\x17\x5d\x3d\xb9\x73\xba\xe7\xf1\x79\x58\xfb\xfd\x08\x00\x00\xff\xff\xd3\x08\x8b\x86\x49\x02\x00\x00")

func templatesSqlite3_ddlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqlite3_ddlTmpl,
		"templates/sqlite3_ddl.tmpl",
	)
}

func templatesSqlite3_ddlTmpl() (*asset, error) {
	bytes, err := templatesSqlite3_ddlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sqlite3_ddl.tmpl", size: 585, mode: os.FileMode(438), modTime: time.Unix(1492311494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl": templatesDotTmpl,
	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,
	"templates/dot_tables.tmpl": templatesDot_tablesTmpl,
	"templates/html.tmpl": templatesHtmlTmpl,
	"templates/pg_ddl.tmpl": templatesPg_ddlTmpl,
	"templates/sqlite3_ddl.tmpl": templatesSqlite3_ddlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dot.tmpl": &bintree{templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": &bintree{templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl": &bintree{templatesDot_tablesTmpl, map[string]*bintree{}},
		"html.tmpl": &bintree{templatesHtmlTmpl, map[string]*bintree{}},
		"pg_ddl.tmpl": &bintree{templatesPg_ddlTmpl, map[string]*bintree{}},
		"sqlite3_ddl.tmpl": &bintree{templatesSqlite3_ddlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

