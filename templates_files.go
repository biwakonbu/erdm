// Code generated by go-bindata.
// sources:
// templates/dot.tmpl
// templates/dot_relations.tmpl
// templates/dot_tables.tmpl
// templates/html.tmpl
// templates/pg_ddl.tmpl
// templates/sqlite3_ddl.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\x80\xe1\xbd\xd0\x77\x38\x32\x97\xd2\x51\x90\x4c\x6e\x15\x45\x70\x14\x91\x94\xbb\x36\x81\xf4\xae\x34\x27\x28\x21\xef\x2e\x45\x9c\x9c\xff\x1f\xbe\x9c\x91\xc6\xc0\x04\x06\x45\x4d\x29\x75\x85\x61\x5a\xdd\xe2\x61\x82\x5c\x57\x00\x2c\x48\x70\x4b\xde\x2d\x64\x07\x79\x35\x49\xdf\x91\xec\x2a\x4f\x46\xc2\xc6\x53\x98\xbc\xda\xae\xed\x76\xcd\x28\xac\xec\x66\xb2\xe6\x2c\x2a\x70\x75\x9c\xe0\x24\x2c\x70\xe8\x8f\xd0\x5f\xcc\x7d\x5f\x57\x39\x2b\xcd\x4b\x74\xfa\x05\x1f\xea\x86\x48\xc9\x40\xbb\xc9\xff\x79\xa5\xe8\x34\x08\xff\x8e\xb2\x2d\xc4\x58\xca\x27\x00\x00\xff\xff\xe0\xa7\x69\xb5\xb8\x00\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 184, mode: os.FileMode(438), modTime: time.Unix(1496322822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcf\x4a\x03\x31\x10\xc6\xef\x85\xbe\xc3\x47\xd8\xc3\x2e\xb8\x79\x00\xa1\x5e\xaa\x57\x0f\xb5\xe0\x41\x44\xa6\x66\xda\x06\xd3\x09\x64\x67\x11\x09\x79\x77\x49\x77\xc1\x16\x84\x5e\x92\xf0\x23\xbf\x6f\xfe\xe4\xec\x78\xef\x85\x61\x5c\xd4\x8f\xc4\x81\xd4\x47\x19\x4c\x29\xcb\x45\xce\x3d\x12\xc9\x81\xd1\x7c\xdd\xa1\x51\xdc\xaf\x60\xb7\xb4\x0b\x3c\xa0\xbf\xfe\x60\xd7\x31\x8c\x27\xb9\xe0\x7e\x8f\x96\xc4\xa1\x15\x86\xdd\xcc\xb9\x93\xfd\x4c\x27\xde\x30\x05\x18\xd3\xa1\x95\xa8\xb0\xaf\x5e\x8f\x71\xd4\xa7\xe4\xba\x0e\x35\x62\xb9\x00\xd8\x1d\x18\x6f\xf5\x05\x50\x4a\xf1\xfb\xc8\xe4\xb0\x82\x91\x28\x6c\x26\x5e\x51\xa0\x1d\x87\xca\x73\xfe\xab\xb4\xa6\xe4\xbc\x50\xf0\xfa\xf3\x12\xc7\xf4\xc9\xa5\xcc\x8a\x92\x0f\xb7\x94\x47\x1e\xd4\xcb\x19\xcf\xde\x7b\x3d\x72\x6e\xd4\x6e\xbd\x86\x73\xff\xa5\xa0\x7f\xc0\x65\xc2\xd5\x78\xd3\x26\x58\x5c\x29\xff\x5e\xbf\x01\x00\x00\xff\xff\xb8\xff\xfa\xf2\x7b\x01\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 379, mode: os.FileMode(438), modTime: time.Unix(1496316205, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x5d\x8b\xd4\x30\x14\x86\xef\x05\xff\xc3\x21\xcc\xc5\x0e\xd8\x8e\x78\xa9\x6d\x41\xc5\x85\x22\x0c\xcb\xb2\x8b\x17\x22\x92\x69\x4e\x6b\xf0\x4c\x32\xa6\xe9\x68\x09\xf9\xef\x92\xb4\x9d\xc9\x8c\x1f\x7b\x13\x48\x72\xde\xf7\x3c\xe7\xc3\x39\x81\xad\x54\x08\x4c\x68\xfb\xd5\xf2\x1d\x61\xcf\xbc\x7f\xfe\xcc\x39\xc3\x55\x87\xb0\xb2\xdf\x5f\xc0\xca\xc2\xeb\x12\xf2\x87\xf8\x1d\x7e\x01\x9c\xcb\x1f\xa4\x25\xbc\x47\x4e\xde\xc3\x67\xe2\x3b\x24\x28\xa1\x28\xa2\x09\xec\xb4\x11\x68\x4a\xf6\x92\x41\x83\x44\x57\xd7\x03\x17\x42\xaa\x2e\xdc\xab\xe0\x06\x50\x58\x53\x15\x56\x40\xa3\xa9\x3f\x70\x55\xb2\x57\xac\x2a\x5a\xad\x2c\xb4\xbc\xc1\x92\xdd\xcb\xc6\x8e\xd9\x3b\x4d\x62\x51\x38\x97\x81\x6c\x41\x21\x4c\x24\xc0\x98\xf7\x0b\x96\xf7\x1b\xe7\x50\x89\xf3\x4b\x00\x85\x6c\x82\x07\x28\x36\xc1\xbb\x2a\x36\x56\x84\xc3\x24\x9e\x73\xdd\xa1\xec\x26\x96\xfd\x5e\xd3\xb0\x57\xfd\x22\x9d\xf3\xde\x28\x6d\x21\xff\x24\xed\x37\x3d\xd8\x0f\x46\xac\x13\xf3\xb9\x16\x4e\xb2\x53\x25\x23\x6c\xed\x13\xd0\x19\xfc\x0f\xdb\xfb\xa9\xdf\xe3\x01\xbd\x07\xe7\x42\x76\xae\xc4\x8c\xf0\x96\x48\xff\xdc\x0e\x44\x6b\xc8\xeb\xfe\x51\xc9\x1f\x03\x26\x30\x37\x8f\xdb\xed\xfa\x9c\x1c\xa9\xc7\x48\x70\x21\x4d\xc2\xff\x1a\x7d\x32\x4e\x7d\xd3\xb8\x80\x3c\x35\xd3\x8a\x2a\x12\xe6\x75\x7f\x67\xe4\x9e\x9b\xf1\x23\x8e\x67\xd9\xdd\x95\x68\x89\xbd\xd5\x06\x65\xa7\x2e\x62\x6f\xff\x95\xe0\x8f\x61\xc9\x30\x2d\x79\x8c\xe3\xaa\x95\xc0\x5f\xf1\x08\xbb\x5a\x3b\xb7\x92\xc7\xd8\xb6\xc4\x23\x4c\xfc\xd4\xe8\xe5\x3d\xec\x6d\x55\x7d\x79\x13\x96\x3f\xfd\xfa\x1d\x00\x00\xff\xff\x09\xa5\x8b\xe1\x24\x03\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 804, mode: os.FileMode(438), modTime: time.Unix(1496316205, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xe0\xd8\xa0\x4e\x80\x98\x6a\x92\x15\x5d\x1d\xd9\xc3\x90\xac\x58\xd0\x20\xeb\xda\xe4\xa9\x08\x02\x9a\xa2\x2d\xa6\x14\xa5\x92\x94\x13\x43\xd3\x77\x1f\x48\x4a\xb6\x6c\x4b\xfe\x13\xa7\x59\xd1\xed\xc9\x12\x75\xbc\xfb\xdd\x5f\xde\x49\xce\xb2\x80\x0e\x98\xa0\x00\x86\x3a\xe2\x10\xb4\xf3\x7c\xc7\xff\x29\x88\x89\x1e\x27\x14\x98\xb5\xde\x8e\x6f\x7e\x00\xc7\x62\xd8\x85\x77\x18\xf6\x76\x00\x00\xc0\x0f\x29\x0e\xdc\xa5\xbd\x55\x44\xb2\x44\x03\x25\x49\x17\x86\x5a\x27\xaa\xe3\x79\xf8\x0e\x3f\xa0\x61\x1c\x0f\x39\xc5\x09\x53\x88\xc4\x91\x5d\xf3\x38\xeb\x2b\xef\x9e\xf6\x07\xb1\xd0\xde\x21\x7a\x8d\x8e\xcb\x3b\x74\xa7\x60\xcf\xf7\x1c\xb7\x0a\x7b\xce\xc4\x17\x20\x29\xef\x42\xa5\xc7\x9c\xaa\x90\x52\x0d\x41\x28\xe9\x60\x2a\x2e\xc2\x0f\x24\x10\xa8\x1f\xc7\x5a\x69\x89\x13\x73\x63\x44\x4e\x16\xbc\x63\x74\x8c\xde\x78\x44\xa9\xe9\x1a\x8a\x98\x40\x44\x29\x58\x11\x16\x51\x8d\x01\x09\xb1\x54\x54\x77\xe1\xf5\xd5\xbb\xf6\x2f\xa5\xd6\xde\x54\x6d\xbf\x1f\x07\x63\x20\x86\x6d\x9c\x24\x5d\x88\x93\xa4\xca\x22\x60\x23\xf3\x88\xc4\x42\xcb\x98\x73\x2a\xbb\xf0\x0a\xf7\x39\x3d\x9d\x2c\x54\xa8\x27\x3b\x08\xc7\x4a\x75\xa1\xd9\x85\x99\xa0\xb2\x3d\xe0\x29\x0b\xe6\x28\xe7\xa9\x05\x1e\xf5\xb1\x04\xee\xa7\xcd\xc4\x88\x4a\x45\x21\x90\x31\xa7\xf6\x21\x1b\x62\xcd\x62\x51\xc3\xa5\x9e\x53\xbb\x2f\xb1\x08\x60\x2f\xcb\x60\x96\x51\x19\x20\x81\x23\x9a\xe7\x30\xcf\x7d\x2f\x60\xa3\xb5\xd9\x90\x98\x73\x9c\x28\x0a\xca\x8b\x06\x04\x76\xfb\x20\x96\xd1\xdc\x7e\xbb\x54\x5c\x4b\x36\x0c\xf5\x92\xfd\x96\x07\x13\x49\xaa\x81\x09\xdc\x2e\xd4\xf4\x41\x43\xe3\x81\x28\x0e\x4c\xd4\x7c\xa1\xe3\xfb\x58\x06\x10\x24\x1c\x13\x1a\xc6\x3c\x30\x2e\xf9\x44\xb1\x24\x21\x42\x08\x96\xb2\x8d\xd0\xd2\x6b\xd0\x5b\x02\xd8\x33\x94\x0d\xb6\xa8\x37\x53\xcd\x72\xdd\xd2\xa3\xe3\x40\xc6\xf7\x6b\xf8\x98\xc4\xbc\x1d\x05\xed\x63\xa0\x58\x40\xfb\x78\x3e\x0c\x67\xb6\xa5\xbc\xe2\x12\xe3\x8a\xf6\xea\x4d\xc0\x65\xab\x31\xbd\xa4\x09\xc5\xba\x0b\xb5\x09\x7c\xc0\x04\xb0\x17\x17\x4c\x69\xf0\x37\x18\x30\xae\xa9\xec\x94\x7e\xe9\xf9\xb8\xc8\xe6\x17\x96\xaa\x6d\xa3\xcf\x5e\x4e\xe3\xaf\x88\xc9\xb9\x55\xdf\xc3\x3d\xdf\xe3\x6c\x99\xb3\x52\xbe\x91\xab\x1a\x8c\xf6\x76\x99\xb1\xc2\xa3\xde\xef\x1f\xcf\x7c\x2f\x3c\x5a\x42\xc4\xa2\xa1\x2b\x91\x59\x86\xce\x23\x3c\xa4\xef\x18\xa7\x85\x26\xe0\x9e\x05\x3a\xec\xc2\xb7\xaf\x5e\x25\x0f\x4b\x63\x2f\x3c\xea\xd9\x62\x02\x8c\x2d\x57\x48\xac\x68\xe1\x0c\x2b\xa9\x4a\x62\xa1\xd8\xc8\x24\x66\x11\x5f\xab\xfc\xe9\x3c\xb8\xa1\x4b\x67\xc4\x3a\xc2\x76\x3f\x96\x01\x95\xb4\x2e\x94\x17\x85\x9a\xfa\xba\x9a\xce\xd1\xca\xf5\x08\x1d\x71\xb0\x3e\x31\x98\xaa\x5f\xa3\x8e\xd2\x92\x25\x34\xd8\x5c\xb9\x45\x11\xeb\x2b\xbb\xb8\x57\x96\xd8\x54\x4a\x08\x9d\x39\xcb\x36\x67\x16\x16\xb1\x75\x89\x23\xba\x77\x11\x0f\x19\xc1\x7c\xdf\xf7\x74\xf8\x64\x4c\x3f\x84\x63\xb5\x25\x57\xdf\xdb\xc4\xe3\xb3\x58\x1e\xb9\x11\x14\xa1\x53\x29\x41\xdc\x59\xe7\xb6\x52\x8a\x36\x8d\xad\x79\xee\x3e\x06\x86\x5b\x99\xac\x9b\x56\xc1\xc7\x8a\x7f\x9c\x3d\x7d\xef\x11\x61\xeb\x7b\x16\xf9\x8f\x9a\x82\x4c\x0c\xe2\x2d\xf3\xef\x34\xe6\x69\x24\x6c\xae\xf8\x7d\xe9\xf5\x9e\x30\x0b\x17\x58\x3f\x41\x2e\x96\xbc\xaf\xc6\x09\xdd\x9e\xcb\x87\xf7\xdb\xf3\xb8\xfc\xf3\xca\x6a\x77\x79\x7d\x71\xb1\x3d\xb7\xeb\xcb\xf3\xbf\xb6\xe7\xf2\xee\x09\xf4\x3a\xa3\x03\x9c\x72\xfd\x14\x61\x10\x45\x54\x6c\xc1\x68\xab\xfa\x5b\x6d\x24\x88\x0b\xc8\xb2\x93\x40\xee\xfe\x96\x33\xb5\xaa\xdd\x5f\x2e\x24\x00\x76\x4e\xec\xc2\xfb\x90\x69\xda\x56\x09\x26\xb4\x03\x44\x7c\x2f\x71\x72\x52\x54\x50\x27\xeb\x1b\x54\xf1\xf5\x65\xff\x1b\x32\xcd\x80\xf4\xb4\x32\xcd\xb0\xd5\xc6\x9c\x0d\x45\x07\x10\x2a\x34\x95\x73\x22\x99\xba\x4d\xbe\xd0\x31\xf8\x15\xb4\x5e\xbe\x78\xfb\xe6\xe7\xd7\x27\x2d\xd0\x01\xad\xd6\xf3\xc3\x10\x29\xe7\x06\x86\x95\x5f\x62\x79\x7e\x18\xa9\x60\x5f\x53\xfa\x8d\xed\x51\x1f\x0a\xbe\x4a\xb0\x30\x29\xc8\x06\x65\xfa\x21\x49\xb9\x7d\x47\x70\x6b\x93\x10\xf6\xda\x2f\x87\xfa\xa4\x76\x22\xab\xdd\x50\x6d\x4b\x9a\x09\x5c\x87\x62\xa4\x6f\xd1\xa8\xac\xa5\x62\x15\x48\xe0\x6a\xe6\xb3\x5a\x76\x5a\xdc\x6c\x99\x35\xd5\xad\x40\x53\xac\x14\xf5\xad\xc0\x69\x97\x1c\x40\x73\x6a\x6d\x6d\xa3\xff\x9b\xb9\xef\xa8\x99\x3b\x17\x01\x7d\x70\x0d\xd7\x53\x75\x6f\x6e\xea\xdf\xba\xad\x11\xec\xeb\x8f\xd4\x49\x30\x6b\xe8\x49\x23\x61\x6f\x9f\xa7\x8f\xb0\xa2\x90\x66\x9a\x3f\xdf\x59\xee\x64\xba\xaa\xa2\x9e\xeb\xfc\x72\x42\xbf\x93\xe3\xab\xa6\xc8\x96\x46\xf9\x8f\xd7\xd8\xf5\xb5\x5a\x4f\x8b\xb5\x50\xaf\x44\xb9\xec\x55\xeb\x63\x5f\x98\xcf\xdf\x6e\xfe\x11\x0a\x8b\x61\xca\xb1\xbc\x53\xde\x21\x3a\x42\xc7\x47\xe5\x82\xfd\x2c\xd4\xf0\x2d\xaa\x90\x32\xfd\xd0\xe0\xdd\xe1\x11\x76\xab\x73\xc5\x66\xc2\x2d\x0e\x52\x4e\xf7\x5a\x38\x49\x5a\x07\xe0\xf3\xcd\xfe\x0c\x15\x9a\x7e\x26\xda\x6b\xcd\x7d\x26\x32\xe4\xad\x5d\x45\xe2\x84\xb6\x0e\xc0\x20\x15\xc4\xb4\x55\x60\xcf\x2d\xed\x83\x6c\xc1\x6c\xee\x09\x9a\xbe\x99\xed\x82\xcf\x0b\x44\x59\xd6\x06\x12\x8b\x21\x05\xbb\xec\x00\xec\x6a\xd0\xe9\x02\x64\x45\xab\x3c\xaf\x71\x52\x06\xcd\xa8\x02\x3b\x00\x66\xd9\xae\x46\x57\xa6\xd8\x7d\xa4\x98\xe7\x39\x3c\xa8\xf3\x29\xac\x4e\x55\xb3\xdb\x1a\xb7\x54\x4a\x76\xa7\x06\xf2\x1c\x6a\x03\x9b\x8d\x0c\xee\x5d\x8d\xec\x29\xdb\x00\x1d\x64\xd0\xd6\xe6\x02\x05\x1b\xad\x82\x51\xd6\x37\xd8\x01\x8e\xfe\x5c\x5d\xdb\x85\x3c\xaf\xdf\x51\x94\x61\x27\x60\x82\x8f\x58\x6c\x6c\x84\x4e\xcb\x2a\x6d\xb8\x31\x92\xe7\x46\x11\x2a\x02\x53\x8e\x6a\x19\x16\x4f\xeb\x1e\xdd\x2c\x43\xb0\xae\xed\x88\xb1\x1d\x29\x4c\x37\x41\x57\x9b\x9a\x33\x7e\x27\xab\xfd\x5e\xef\x79\xb2\xdc\xe4\x00\x40\x93\x4c\x53\x62\x37\xa1\x36\xd1\x16\xd3\xa4\x73\x0f\x41\xe7\xea\x83\x64\x11\x96\xe3\xf7\x74\xdc\xe0\xa1\x45\xaf\x92\xaa\x53\xb3\x8c\x0d\x00\xfa\x03\xab\xe2\x05\xcb\x27\xaa\x35\x13\xc3\x06\x93\x00\x58\xcc\x14\x13\xbc\x67\x93\x19\xe3\x60\x89\xeb\x1c\x08\x33\x80\x96\x10\x7e\xe3\x3c\xbe\xbf\x4c\x39\xaf\x62\xf8\x58\x4c\x4e\x8d\x4c\x26\xa3\xd5\x40\xc6\xd1\x04\x43\xb9\x0d\x9d\x62\x19\x30\x81\x39\xd3\xe3\x4f\x71\x2a\xc9\x32\x4b\x4e\xa7\xb4\x78\x29\xa3\x33\xaa\x34\x13\x05\xac\x35\xb8\xd9\x29\x72\x81\xa1\x2d\x2f\xa6\x13\x2e\x03\xa8\x30\xd6\x44\xf5\xd3\xf2\x98\x6e\x10\x30\x73\xb2\x37\x84\xf9\x6c\xa0\xbb\x48\x77\xa1\x4e\x50\xc1\xdf\xf4\x4b\x06\x19\xb1\xbf\x16\xc2\x4d\xf1\xdb\x14\x3e\x25\x59\x5e\x62\xbe\x39\xd9\x69\x2a\xbc\x54\x06\xa0\x5b\x53\x97\xad\x0a\xd3\xa4\x98\xa4\xc4\x02\x61\x7e\x32\xb3\x94\xcf\x4a\xba\xd9\x3f\xa9\x9c\x7f\x4d\x87\xd3\x06\x47\xe0\xdd\xd7\x94\xca\xb1\x77\x88\x0e\x0f\xd1\x61\x71\xb7\xc6\xf1\x37\x23\x61\x9d\xbf\x5e\x1c\xa1\x57\xde\xdd\xfc\x3f\x2f\x16\x65\xf8\x9e\x6b\x36\x7c\xcf\xfd\xfb\xa4\x30\xf8\x3f\x01\x00\x00\xff\xff\x14\x33\xe2\xd6\xa9\x22\x00\x00")

func templatesHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlTmpl,
		"templates/html.tmpl",
	)
}

func templatesHtmlTmpl() (*asset, error) {
	bytes, err := templatesHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html.tmpl", size: 8873, mode: os.FileMode(438), modTime: time.Unix(1497056053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPg_ddlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xea\x40\x10\x7d\x17\xfc\x0f\x83\xe4\x41\xc1\x9b\x1f\x70\xe5\x3e\xe4\x26\xab\x0d\xa6\xd1\xe6\x03\xf4\xa9\xa4\xc9\x28\x0b\xeb\x6a\xcd\x86\x2a\xcb\xfc\xf7\xb2\x9b\x68\x53\xfa\xf1\x16\x32\xe7\x9c\x39\xe7\xcc\x6a\x5d\xe1\x8e\x4b\x84\xd1\x69\xff\x5c\x55\x62\x04\x7f\x88\x86\x03\xad\xcf\x85\xdc\x23\x38\x8a\x4f\xc1\x51\xf0\xf7\x1f\xb8\x59\xf1\x22\xb0\x6e\xe7\x41\xb2\x5a\x43\xe6\xfd\x8f\x18\x84\x73\x60\x9b\x30\xcd\x52\xd0\xda\x51\x6e\xc6\x95\xc0\x04\x0b\x41\x04\xbe\x97\xfa\x5e\xc0\x66\x46\x0f\x65\xf5\xbb\xb0\x99\xfa\x09\xf3\x32\xd6\x09\x7f\x91\x1b\xf7\xe8\xa5\xa1\x97\x96\xee\x1f\x45\x73\x90\x35\x11\x00\x18\x52\xf9\x89\xd4\xfe\xb8\x9e\x90\x48\x6b\xbe\x03\xa7\x74\xc3\x3a\x97\xfc\xb5\x41\x22\xc8\xe3\xf0\x29\x67\x9d\x3b\x3b\x97\x47\x65\x30\x9e\x10\xc7\xb7\xb8\x11\x46\x22\x5e\x65\x10\xe7\x51\xd4\x87\x39\xa5\xfb\x50\xd4\x01\xee\x8a\x46\xa8\x14\x95\xe2\x72\x4f\x04\x01\x9b\x7b\x79\x94\xb5\x5b\xbb\xa9\x61\x58\xe2\xb4\xd7\x83\xf1\xba\x4e\xc2\x47\x2f\xd9\xc2\x92\x6d\x61\x6c\xd3\x2e\x50\xad\xcf\xfc\x50\x9c\xaf\x4b\xbc\xde\x73\x4d\x86\x83\xc9\xac\x97\x9d\x9b\xec\xbc\xba\x98\xf4\x8e\x72\x43\x59\xe1\xe5\x76\x98\xb6\xc1\xd6\x22\xaf\x2e\x3f\x66\x85\x30\x0e\xd8\xc6\xf8\x34\x28\x5b\x18\x11\xac\xe2\x6f\x5a\xef\x30\x0b\x54\x76\xd3\x87\xad\xdb\x5d\x6f\x4f\xe6\x7e\x62\xfb\xf1\x1e\x00\x00\xff\xff\xba\x44\xdb\x58\x5a\x02\x00\x00")

func templatesPg_ddlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPg_ddlTmpl,
		"templates/pg_ddl.tmpl",
	)
}

func templatesPg_ddlTmpl() (*asset, error) {
	bytes, err := templatesPg_ddlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pg_ddl.tmpl", size: 602, mode: os.FileMode(438), modTime: time.Unix(1487831781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqlite3_ddlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x4e\xc2\x40\x10\xbd\xf7\x2b\x26\xa4\x07\x48\xb0\x17\x6f\x12\x0f\x95\x2e\xd8\x50\x0b\x96\x36\x81\x93\xa9\xed\x40\x36\x59\x16\xa1\xdb\x08\xd9\xcc\xbf\x9b\xdd\xae\xa0\x46\x3d\x35\xe9\xbc\xf7\xe6\xbd\x37\xab\x75\x8d\x1b\x2e\x11\x7a\xcd\x41\x70\x85\xb7\x2f\x75\x2d\x7a\x70\x43\xe4\x69\x7d\x2c\xe5\x16\xc1\x57\x7c\x08\xbe\x82\xbb\x7b\x08\xf2\xf2\x55\x60\x63\xc7\x51\x36\x5f\x40\x1e\x3e\x24\x0c\xe2\x09\xb0\x55\xbc\xcc\x97\xa0\xb5\xaf\x82\x9c\x2b\x81\x19\x96\x82\x68\xe4\x69\x8d\xb2\xfe\x57\x8d\xc8\x1b\x67\x2c\xcc\x99\x53\xfb\xa9\x01\xfd\x2b\xb9\x32\xe4\xca\x92\xc7\x7b\xd1\xee\x64\x43\x04\x00\x86\x53\x7d\xe3\x74\x3f\xce\x6f\x48\xa4\x35\xdf\x80\x5f\x05\x71\x53\x48\x7e\x68\x91\x08\x8a\x34\x7e\x2e\x98\xb3\x66\xe7\x72\xaf\x0c\x26\x14\x62\xff\x9e\xb6\xc2\x48\xa4\xf3\x1c\xd2\x22\x49\xbe\xc2\xfc\x2a\x78\x2c\x9b\x08\x37\x65\x2b\xd4\x12\x95\xe2\x72\x4b\x04\x11\x9b\x84\x45\x92\x77\x5b\xdd\xd4\x30\x2c\x71\x78\xe9\xc0\x38\x5d\x64\xf1\x53\x98\xad\x61\xc6\xd6\xd0\xb7\x51\xa7\xa8\x16\x47\xbe\x2b\x8f\xe7\x19\x9e\x2f\xa9\x06\xde\x60\x74\xcd\xcd\x4d\x6e\x5e\x9f\x4c\x72\x5f\x05\xb1\xac\xf1\xe4\xee\xd0\x75\xd7\xb9\xe3\xf5\xe9\xcf\x98\x10\xa7\x11\x5b\x19\x8b\x06\x65\xbb\x22\x82\x79\xfa\x4b\xdf\x0e\x33\x45\x65\x17\x5d\x3d\xb9\x73\xba\xe7\xf1\x79\x58\xfb\xfd\x08\x00\x00\xff\xff\xd3\x08\x8b\x86\x49\x02\x00\x00")

func templatesSqlite3_ddlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqlite3_ddlTmpl,
		"templates/sqlite3_ddl.tmpl",
	)
}

func templatesSqlite3_ddlTmpl() (*asset, error) {
	bytes, err := templatesSqlite3_ddlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sqlite3_ddl.tmpl", size: 585, mode: os.FileMode(438), modTime: time.Unix(1492311494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl": templatesDotTmpl,
	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,
	"templates/dot_tables.tmpl": templatesDot_tablesTmpl,
	"templates/html.tmpl": templatesHtmlTmpl,
	"templates/pg_ddl.tmpl": templatesPg_ddlTmpl,
	"templates/sqlite3_ddl.tmpl": templatesSqlite3_ddlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dot.tmpl": &bintree{templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": &bintree{templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl": &bintree{templatesDot_tablesTmpl, map[string]*bintree{}},
		"html.tmpl": &bintree{templatesHtmlTmpl, map[string]*bintree{}},
		"pg_ddl.tmpl": &bintree{templatesPg_ddlTmpl, map[string]*bintree{}},
		"sqlite3_ddl.tmpl": &bintree{templatesSqlite3_ddlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

