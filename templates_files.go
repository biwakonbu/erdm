// Code generated by go-bindata.
// sources:
// templates/dot.tmpl
// templates/dot_relations.tmpl
// templates/dot_tables.tmpl
// templates/html.tmpl
// templates/pg_ddl.tmpl
// templates/sqlite3_ddl.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\x80\xe1\xbd\xd0\x77\x38\x32\x97\xd2\x51\x90\xcc\xe2\xe0\x24\x4e\x22\x72\xf5\xae\x4d\x20\xbd\x2b\xed\x09\x4a\xc8\xbb\x4b\x11\x27\xe7\xff\x87\x2f\x67\xe2\x21\x0a\x83\x23\x35\x57\x4a\x5d\x51\x1c\x17\x9c\x03\x8c\x90\xeb\x0a\x40\x94\x18\xae\x6b\xc0\x99\x7d\xaf\xaf\x66\xb5\x77\x62\xbf\xe8\x53\x88\xa9\x09\x1c\xc7\x60\xbe\x6b\xbb\x5d\x33\xa8\x98\xe0\xc4\xde\x9d\xce\x70\x39\xc2\x41\x2d\xc4\x87\xbb\xed\xeb\x2a\x67\xe3\x69\x4e\x68\x5f\xe7\x6e\xd8\x27\x5e\x1d\xb4\x1b\xf8\x9f\x17\x4e\x68\x51\xe5\x77\x94\x6d\x61\xa1\x52\x3e\x01\x00\x00\xff\xff\xaa\x9c\xbf\xc1\xaf\x00\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 175, mode: os.FileMode(438), modTime: time.Unix(1485949068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x4b\x03\x41\x0c\x85\xef\x85\xfe\x87\xc7\xb0\x47\x9d\x1f\x20\xd4\x4b\x3d\x7b\xa8\xbd\x89\x48\xea\xa4\x75\x30\xcd\xc0\xec\x14\x91\x90\xff\x2e\xb3\x5d\x58\x05\xc1\x4b\x12\xbe\xe4\x3d\xf2\xcc\x12\x1f\xb3\x32\x42\x2a\xed\xb5\xb2\x50\xcb\x45\xc7\xe0\x6e\x56\x49\x4f\x8c\xe1\xe3\x06\x43\xc3\xdd\x06\x71\x4f\x07\xe1\x71\x59\xc5\x6d\x91\xcb\x59\x27\x92\x8f\x50\x46\xdc\xcd\x0e\xd7\xdb\x47\x3a\xf3\x8e\x49\x10\x82\xfb\x7a\xb5\x5e\x01\x9c\x4e\x8c\xe7\x3e\x01\x54\x6b\xf9\x7c\x67\x4a\xd8\x20\x68\x51\x0e\x57\xde\x91\xd0\x81\xa5\x73\xb3\xc5\x74\x4b\x35\x65\x25\xc9\xed\xeb\xa9\x5c\xea\x1b\xbb\xcf\x92\x46\x59\xfe\x93\x3c\xf0\xd8\xb2\x4e\x78\xd6\xbd\xf4\x62\x36\xb4\xb8\xcf\x4d\xa6\x57\xdd\x71\x7b\x8f\x9f\x0e\xbf\x92\xf4\x18\x66\xac\xa9\x67\xfe\xa3\x7d\x07\x00\x00\xff\xff\xc2\xc9\x2b\x7a\x50\x01\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 336, mode: os.FileMode(438), modTime: time.Unix(1492074617, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x8b\xdb\x30\x10\x86\xef\x85\xfe\x87\x41\xe4\x90\x40\xed\x94\x1e\x5b\xdb\xd0\x16\x02\xa6\x10\x42\x48\x4e\xa5\x14\xc5\x1a\x1b\xd1\x89\x94\xca\x4a\x76\x8d\xd0\x7f\x5f\x24\x27\xb1\x93\xfd\xba\x48\x48\x9a\xf7\xd5\x33\x1f\xce\x09\xac\xa5\x42\x60\x42\xdb\xbf\x96\xef\x08\x5b\xe6\xfd\xc7\x0f\xce\x19\xae\x1a\x84\x89\xfd\xf7\x09\x26\x16\xbe\xe6\x90\x6e\xe2\x73\x78\x05\x70\x2e\xdd\x48\x4b\xb8\x46\x4e\xde\xc3\x6f\xe2\x3b\x24\xc8\x21\xcb\xa2\x09\xec\xb4\x11\x68\x72\xf6\x99\x41\x85\x44\x77\xc7\x03\x17\x42\xaa\x26\x9c\x8b\xe0\x06\x90\x59\x53\x64\x56\x40\xa5\xa9\x3d\x70\x95\xb3\x2f\xac\xc8\x6a\xad\x2c\xd4\xbc\xc2\x9c\xad\x65\x65\xbb\xe4\x87\x26\x71\x51\x38\x97\x80\xac\x41\x21\xf4\x24\xc0\x98\xf7\x17\x2c\xef\xe7\xce\xa1\x12\xc3\x4d\x00\x85\xa4\x87\x07\xc8\xe6\xc1\xbb\xc8\xe6\x56\x84\xc5\x8c\x3c\xcf\x79\x87\xb4\xab\x98\xf6\x4f\x4d\xc7\xbd\x6a\xaf\xd2\x33\x29\x27\xd9\xa8\x9c\x11\xd6\xf6\x1d\xa4\x04\xde\x82\xf2\xbe\xaf\x66\x77\x40\xef\xc1\x39\x59\xc3\x94\x2b\x01\x53\xa5\x2d\xa4\xdf\x89\xf4\xc3\xf2\x48\x34\x83\xb4\x6c\xb7\x4a\xfe\x3f\xe2\x6c\xc8\x63\xba\x5d\x2e\x67\xc3\xe7\x48\x2d\x46\x82\x1b\xe9\x28\xfc\xc5\xe8\xab\xf1\xd8\x77\x1c\x17\x90\xfb\x52\x59\x51\x44\xc2\xb4\x6c\x57\x46\xee\xb9\xe9\x7e\x61\x37\xc8\x56\x77\xa2\x4b\xec\x42\x1b\x94\x8d\xba\x89\x5d\xbc\xf6\xc1\xb3\x56\xc8\xd0\x0b\x79\x8a\xcd\x28\x95\xc0\xc7\xb8\x84\x49\x2c\x9d\x9b\xc8\x53\x2c\xdb\xc8\x23\xf4\x73\xb8\x08\xe3\x58\x14\x7f\xbe\x85\x99\x3e\x43\xc5\xed\x29\x00\x00\xff\xff\x3b\xae\x35\xaf\xfb\x02\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 763, mode: os.FileMode(438), modTime: time.Unix(1495692067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xe3\xb8\x11\xfe\x9e\x5f\xc1\xf2\x82\x73\x02\xc4\x54\x5e\xee\x70\x57\x47\x76\x51\x24\xbb\x68\xb0\x41\xba\xdd\x4d\x3e\x2d\x82\x80\xa6\x68\x8b\x59\x8a\xd4\x92\xb4\x13\x43\xd5\x7f\x2f\x48\x4a\xb6\x6c\x4b\x7e\x89\xb3\xe9\x62\xdb\x4f\x96\xa8\xe1\x3c\x0f\x67\x86\xc3\x19\xc9\x59\x16\xd1\x01\x13\x14\xc0\xd8\x24\x1c\x82\x76\x9e\xef\x85\x7f\x89\x24\x31\x93\x94\x02\x3b\xd6\xdb\x0b\xed\x0f\xe0\x58\x0c\xbb\xf0\x11\xc3\xde\x1e\x00\x00\x84\x31\xc5\x91\xbf\x74\xb7\x9a\x28\x96\x1a\xa0\x15\xe9\xc2\xd8\x98\x54\x77\x82\x00\x3f\xe2\x67\x34\x94\x72\xc8\x29\x4e\x99\x46\x44\x26\x6e\x2c\xe0\xac\xaf\x83\x27\xda\x1f\x48\x61\x82\x13\xf4\x3b\x3a\x2b\xef\xd0\xa3\x86\xbd\x30\xf0\xda\x2a\xea\x39\x13\x5f\x81\xa2\xbc\x0b\xb5\x99\x70\xaa\x63\x4a\x0d\x04\xb1\xa2\x83\x19\x5c\x82\x9f\x49\x24\x50\x5f\x4a\xa3\x8d\xc2\xa9\xbd\xb1\x90\xd3\x81\xe0\x0c\x9d\xa1\x3f\x02\xa2\xf5\x6c\x0c\x25\x4c\x20\xa2\x35\xac\x80\x25\xd4\x60\x40\x62\xac\x34\x35\x5d\x78\x77\xfb\xbe\xfd\x67\xb9\xea\x60\xb6\xec\xb0\x2f\xa3\x09\x10\xc3\x36\x4e\xd3\x2e\xc4\x69\x5a\x55\x11\xb1\xb1\x7d\x44\xa4\x30\x4a\x72\x4e\x55\x17\xde\xe2\x3e\xa7\x17\xd3\x81\x8a\xf4\x74\x06\xe1\x58\xeb\x2e\x14\x78\xdc\xc7\x0a\xf8\x9f\x36\x13\x63\xaa\x34\x85\x40\x49\x4e\xdd\x43\x36\xc4\x86\x49\xb1\xa0\x61\x51\x8b\xc5\xc6\x4c\x2c\x21\x35\x23\xb6\xfb\x0a\x8b\x08\xf6\xb2\x0c\x66\x19\x55\x11\x12\x38\xa1\x79\x0e\xf3\x3c\x0c\x22\x36\xde\x58\x0d\x91\x9c\xe3\x54\x53\x50\x5e\x34\x30\x70\xd3\x07\x52\x25\x0b\xf3\xdd\x50\x71\xad\xd8\x30\x36\x2b\xe6\x3b\x1d\x4c\xa4\x23\x03\x6c\xc8\x76\xa1\xa1\xcf\x06\x5a\xdb\x27\x32\xb2\xf1\xf2\x95\x4e\x9e\xa4\x8a\x20\x48\x39\x26\x34\x96\x3c\xb2\xce\xf8\x4c\xb1\x22\x31\x42\x08\x96\xd8\x16\xb4\xf4\x17\x0c\x56\x10\x0e\xac\x64\x83\x2d\xea\xcd\x54\x33\x5c\x37\xb4\xa1\xef\xaa\x72\x4a\x3e\x6d\xe0\x5d\x22\x79\x3b\x89\xda\xbf\x01\xcd\x22\xda\xc7\x4d\x01\xe1\xa6\x8d\x78\xc5\x19\xd6\x09\xed\xf5\x93\x80\xdf\xa1\xd6\xe8\x8a\xa6\x14\x9b\x2e\x34\x36\xd8\x01\x13\xc0\x5d\x5c\x33\x6d\xc0\xbf\xc1\x80\x71\x43\x55\xa7\xf4\x48\x2f\xc4\xc5\x0e\xfe\xc5\x49\xb5\x5d\xdc\xb9\xcb\x59\xe4\x15\xd1\xb8\x30\x1a\x06\xb8\x17\x06\x9c\xad\x72\xd3\x88\x6f\xe5\xa4\x06\xa3\xfd\xb9\xca\x58\xf1\x69\xef\xdd\xa7\xcb\x30\x88\x4f\x57\x08\xb1\x64\xe8\xd3\x62\x96\xa1\xab\x04\x0f\xe9\x7b\xc6\x69\xb1\x12\xf0\xc4\x22\x13\x77\xe1\xc9\xf1\xf1\x71\xfa\xbc\x32\xec\xe2\xd3\x9e\xcb\x20\xc0\x1a\x73\x0d\x64\x65\x19\xde\xb2\x8a\xea\x54\x0a\xcd\xc6\xab\xb6\xa2\x9b\xea\x1d\xb7\xa5\x27\xe7\xc0\xbc\x60\xbb\x2f\x55\x44\x15\x8d\xd6\x00\x7a\x50\x9b\x4a\xd7\xcb\x79\x59\xb5\x99\xa0\x17\x8e\x36\x17\x06\xb3\xe5\xd7\x2c\x47\x1b\xc5\x52\x1a\x6d\xbf\xb8\x65\x88\xcd\x17\xbb\x3c\x57\x95\xdc\xf4\x88\x10\x3a\x77\x6c\x6d\xaf\x2c\x2e\x22\xea\x06\x27\xf4\xe0\x5a\x0e\x19\xc1\xdc\xdd\x1c\x86\x81\x89\x5f\x4d\xf3\xc7\x78\xa2\x5f\x43\x75\x18\x6c\xe3\xfb\x79\x42\x2f\x9c\x08\x8a\x20\xaa\xe4\x20\xee\xed\xf4\x50\xc9\x45\xdb\x46\xd9\xa2\xf6\x10\x03\xab\xad\xdc\xac\xdb\xa6\xc1\x97\xc2\xbf\xcc\x9e\x61\xf0\x82\x00\x0e\x03\xc7\xfc\x67\xdd\x8c\x4c\x0c\xe4\x8e\x3b\xf1\x42\xf2\x51\x22\xbe\xcb\x56\xac\xaa\x2e\xf7\xe2\x6b\xec\xf0\x49\x4a\x77\xd7\xf2\xf1\xc3\xee\x3a\x6e\xfe\x79\x0b\x6e\xee\xae\xaf\x77\xd7\x74\x77\x73\xf5\xaf\xbb\x77\xbb\xeb\x79\xff\x0a\xab\xba\xa4\x03\x3c\xe2\xe6\x35\xfc\x9f\x24\x54\xec\xa0\x68\xa7\xc4\x5b\xad\x25\x88\x8f\xc4\xb2\x98\x40\xfe\xfe\x81\x33\xbd\xae\xc4\x5f\x0d\x12\x01\xd7\x15\x76\xe1\x53\xcc\x0c\x6d\xeb\x14\x13\xda\x01\x42\x3e\x29\x9c\x9e\x17\xa9\xd3\x63\x7d\x87\xf4\xbd\x39\xf6\x7f\x03\xd3\x36\x45\xaf\x8b\x69\x1b\xac\x36\xe6\x6c\x28\x3a\x80\x50\x61\xa8\x5a\x80\x64\xfa\x21\xfd\x4a\x27\xe0\x6f\xa0\xf5\xeb\x2f\x7f\xfd\xe3\xb7\xdf\xcf\x5b\xa0\x03\x5a\xad\xb7\xa7\x21\x46\x9c\x5b\x1a\x0e\xbf\xe4\xf2\xf6\x34\x46\x82\x7d\x1b\xd1\xef\x6c\x8f\xfa\x50\x08\x75\x8a\x85\xdd\x82\x6c\x50\x6e\x3f\xa4\x28\x77\xef\x0f\x1e\xdc\x26\x84\xbd\xf6\xaf\x43\x73\x5e\xdb\x8b\xd5\x4e\xa8\xd6\x23\xcd\x02\xbe\x34\xb1\xe8\x3b\x54\x28\x1b\x2d\xb1\x4a\x24\xf2\x39\xf3\x4d\x2d\x3b\x4b\x6e\x2e\xcd\xda\xec\x56\xb0\x29\x46\x8a\xfc\x56\xf0\x74\x43\x9e\x60\x5f\x05\xbb\xdb\xe8\xff\x55\xdc\x0f\x54\xc5\x5d\x89\x88\x3e\xbb\x4a\xeb\xd5\xca\x36\xdf\xee\xef\x5c\xd8\xb8\x14\xf4\x33\xd5\x12\xcc\x99\x7a\x5a\x4a\xb8\xdb\xb7\xa9\x24\x1c\x14\x32\xcc\xf0\xb7\x3b\xcd\x3d\xa6\xcf\x2b\xfa\xad\x4e\x30\x0f\xfa\x83\x1c\x60\x35\x69\xb6\x34\xca\xff\x78\x96\xdd\x7c\x55\x9b\xad\x62\x23\xd6\x6b\x59\xae\x7a\xcd\xfa\xd2\xd7\xe4\x8b\xb7\xdb\x7f\x74\xc2\x62\x38\xe2\x58\x3d\xea\xe0\x04\x9d\xa2\xb3\xd3\x72\xc0\x7d\x06\x6a\xf8\xf6\x54\xa0\xcc\x3e\x2f\x04\x8f\x78\x8c\xfd\xe8\x42\xb2\x99\x6a\x93\xd1\x88\xd3\x83\x16\x4e\xd3\xd6\x11\xf8\x72\x7f\x38\x27\x85\x66\x9f\x85\x0e\x5a\x0b\x9f\x85\xac\x78\x6b\x5f\x13\x99\xd2\xd6\x11\x18\x8c\x04\xb1\x85\x15\x38\xf0\x43\x87\x20\x5b\x32\x9b\x7f\x82\x66\xaf\x67\xbb\xe0\xcb\x92\x50\x96\xb5\x81\xc2\x62\x48\xc1\x3e\x3b\x02\xfb\x06\x74\xba\x00\x39\x68\x9d\xe7\x35\x4e\xca\xa0\x6d\x56\x60\x07\xc0\x2c\xdb\x37\xe8\xd6\x26\xbb\x4f\x14\xf3\x3c\x87\x47\x75\x3e\x85\xd5\xbe\x6a\x7e\x5a\xe3\x94\x4a\xca\xee\xd4\x50\x5e\x60\x6d\x69\xb3\xb1\xe5\xbd\x6f\x90\x3b\x67\x1b\xa8\x83\x0c\xba\xdc\x5c\xb0\x60\xe3\x35\x34\x8a\xa4\xea\xc5\xa7\x68\xc4\x21\xb1\x31\xba\x28\x73\xae\xd5\xc5\x48\x9e\x5b\x5a\x54\x44\xcd\xcb\x2a\xf3\xe5\x8c\xc0\x95\xf6\xe7\xaf\x4d\x48\xb5\x93\x0a\x8d\x75\x8f\xee\x57\xb1\xde\xd4\x7a\xc4\x5a\x8f\x14\xc6\x9b\xae\xa8\x76\x73\xce\x79\x9e\xac\xf7\x7c\xbd\xef\xc9\x6a\xa3\x03\x00\xed\x76\x9a\x09\xfb\x2e\xb5\x49\xb6\xe8\x28\x61\x07\x38\xe9\x2b\xfd\x51\xb1\x04\xab\xc9\x07\x3a\xc9\xeb\x0d\xba\xe0\x87\x62\x5a\xe9\x85\xa3\x2c\x63\x03\x80\xfe\x81\x75\xf1\x92\xe5\x33\x35\x86\x89\x61\x83\x49\x00\x2c\xfa\x8a\x29\xdf\xcb\x69\x9f\x71\xb4\xc2\x75\x9e\x84\x6d\x42\x4b\x0a\x7f\xe7\x5c\x3e\xdd\x8c\x38\xaf\x72\xf8\x54\x74\x4f\x8d\x4a\xa6\xed\xd5\x40\xc9\x64\xca\xa1\x9c\x86\x2e\xb0\x8a\x98\xc0\x9c\x99\xc9\x67\x39\x52\x64\x95\x25\x67\x9d\x9a\x5c\xa9\xe8\x92\x6a\xc3\x44\x41\x6b\x03\x6d\xae\x93\x5c\x52\xe8\x12\x8c\xad\x86\xcb\x00\x2a\x8c\x35\x5d\xfa\x45\x79\x50\x37\x00\xcc\x9d\xed\x0d\x61\x3e\x1f\xe8\x3e\xd2\x7d\xa8\x13\x54\xe8\xb7\x15\x93\x65\x46\xdc\xaf\xa3\x70\x5f\xfc\x36\x85\x4f\x29\x96\x97\x9c\xef\xcf\xf7\x9a\x52\x2f\x55\x11\xe8\xd6\x64\x66\xb7\x84\xd9\xa6\x98\x6e\x89\x25\xc1\xfc\x7c\x6e\x28\x9f\x47\xba\x3f\x3c\xaf\x9c\x80\x4d\xc7\xd3\x16\x87\xe0\xe3\xb7\x11\x55\x93\xe0\x04\x9d\x9c\xa0\x93\xe2\x6e\x83\x03\x70\x0e\x61\x93\x3f\x5b\x9c\xa2\xe3\xe0\x71\xf1\xbf\x16\xcb\x18\x61\xe0\xcb\x8d\x30\xf0\xff\x37\x29\x0c\xfe\x9f\x00\x00\x00\xff\xff\x3c\xe0\x5e\x05\x9b\x22\x00\x00")

func templatesHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlTmpl,
		"templates/html.tmpl",
	)
}

func templatesHtmlTmpl() (*asset, error) {
	bytes, err := templatesHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html.tmpl", size: 8859, mode: os.FileMode(438), modTime: time.Unix(1495715705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPg_ddlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xea\x40\x10\x7d\x17\xfc\x0f\x83\xe4\x41\xc1\x9b\x1f\x70\xe5\x3e\xe4\x26\xab\x0d\xa6\xd1\xe6\x03\xf4\xa9\xa4\xc9\x28\x0b\xeb\x6a\xcd\x86\x2a\xcb\xfc\xf7\xb2\x9b\x68\x53\xfa\xf1\x16\x32\xe7\x9c\x39\xe7\xcc\x6a\x5d\xe1\x8e\x4b\x84\xd1\x69\xff\x5c\x55\x62\x04\x7f\x88\x86\x03\xad\xcf\x85\xdc\x23\x38\x8a\x4f\xc1\x51\xf0\xf7\x1f\xb8\x59\xf1\x22\xb0\x6e\xe7\x41\xb2\x5a\x43\xe6\xfd\x8f\x18\x84\x73\x60\x9b\x30\xcd\x52\xd0\xda\x51\x6e\xc6\x95\xc0\x04\x0b\x41\x04\xbe\x97\xfa\x5e\xc0\x66\x46\x0f\x65\xf5\xbb\xb0\x99\xfa\x09\xf3\x32\xd6\x09\x7f\x91\x1b\xf7\xe8\xa5\xa1\x97\x96\xee\x1f\x45\x73\x90\x35\x11\x00\x18\x52\xf9\x89\xd4\xfe\xb8\x9e\x90\x48\x6b\xbe\x03\xa7\x74\xc3\x3a\x97\xfc\xb5\x41\x22\xc8\xe3\xf0\x29\x67\x9d\x3b\x3b\x97\x47\x65\x30\x9e\x10\xc7\xb7\xb8\x11\x46\x22\x5e\x65\x10\xe7\x51\xd4\x87\x39\xa5\xfb\x50\xd4\x01\xee\x8a\x46\xa8\x14\x95\xe2\x72\x4f\x04\x01\x9b\x7b\x79\x94\xb5\x5b\xbb\xa9\x61\x58\xe2\xb4\xd7\x83\xf1\xba\x4e\xc2\x47\x2f\xd9\xc2\x92\x6d\x61\x6c\xd3\x2e\x50\xad\xcf\xfc\x50\x9c\xaf\x4b\xbc\xde\x73\x4d\x86\x83\xc9\xac\x97\x9d\x9b\xec\xbc\xba\x98\xf4\x8e\x72\x43\x59\xe1\xe5\x76\x98\xb6\xc1\xd6\x22\xaf\x2e\x3f\x66\x85\x30\x0e\xd8\xc6\xf8\x34\x28\x5b\x18\x11\xac\xe2\x6f\x5a\xef\x30\x0b\x54\x76\xd3\x87\xad\xdb\x5d\x6f\x4f\xe6\x7e\x62\xfb\xf1\x1e\x00\x00\xff\xff\xba\x44\xdb\x58\x5a\x02\x00\x00")

func templatesPg_ddlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPg_ddlTmpl,
		"templates/pg_ddl.tmpl",
	)
}

func templatesPg_ddlTmpl() (*asset, error) {
	bytes, err := templatesPg_ddlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pg_ddl.tmpl", size: 602, mode: os.FileMode(438), modTime: time.Unix(1487831781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqlite3_ddlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x4e\xc2\x40\x10\xbd\xf7\x2b\x26\xa4\x07\x48\xb0\x17\x6f\x12\x0f\x95\x2e\xd8\x50\x0b\x96\x36\x81\x93\xa9\xed\x40\x36\x59\x16\xa1\xdb\x08\xd9\xcc\xbf\x9b\xdd\xae\xa0\x46\x3d\x35\xe9\xbc\xf7\xe6\xbd\x37\xab\x75\x8d\x1b\x2e\x11\x7a\xcd\x41\x70\x85\xb7\x2f\x75\x2d\x7a\x70\x43\xe4\x69\x7d\x2c\xe5\x16\xc1\x57\x7c\x08\xbe\x82\xbb\x7b\x08\xf2\xf2\x55\x60\x63\xc7\x51\x36\x5f\x40\x1e\x3e\x24\x0c\xe2\x09\xb0\x55\xbc\xcc\x97\xa0\xb5\xaf\x82\x9c\x2b\x81\x19\x96\x82\x68\xe4\x69\x8d\xb2\xfe\x57\x8d\xc8\x1b\x67\x2c\xcc\x99\x53\xfb\xa9\x01\xfd\x2b\xb9\x32\xe4\xca\x92\xc7\x7b\xd1\xee\x64\x43\x04\x00\x86\x53\x7d\xe3\x74\x3f\xce\x6f\x48\xa4\x35\xdf\x80\x5f\x05\x71\x53\x48\x7e\x68\x91\x08\x8a\x34\x7e\x2e\x98\xb3\x66\xe7\x72\xaf\x0c\x26\x14\x62\xff\x9e\xb6\xc2\x48\xa4\xf3\x1c\xd2\x22\x49\xbe\xc2\xfc\x2a\x78\x2c\x9b\x08\x37\x65\x2b\xd4\x12\x95\xe2\x72\x4b\x04\x11\x9b\x84\x45\x92\x77\x5b\xdd\xd4\x30\x2c\x71\x78\xe9\xc0\x38\x5d\x64\xf1\x53\x98\xad\x61\xc6\xd6\xd0\xb7\x51\xa7\xa8\x16\x47\xbe\x2b\x8f\xe7\x19\x9e\x2f\xa9\x06\xde\x60\x74\xcd\xcd\x4d\x6e\x5e\x9f\x4c\x72\x5f\x05\xb1\xac\xf1\xe4\xee\xd0\x75\xd7\xb9\xe3\xf5\xe9\xcf\x98\x10\xa7\x11\x5b\x19\x8b\x06\x65\xbb\x22\x82\x79\xfa\x4b\xdf\x0e\x33\x45\x65\x17\x5d\x3d\xb9\x73\xba\xe7\xf1\x79\x58\xfb\xfd\x08\x00\x00\xff\xff\xd3\x08\x8b\x86\x49\x02\x00\x00")

func templatesSqlite3_ddlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqlite3_ddlTmpl,
		"templates/sqlite3_ddl.tmpl",
	)
}

func templatesSqlite3_ddlTmpl() (*asset, error) {
	bytes, err := templatesSqlite3_ddlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sqlite3_ddl.tmpl", size: 585, mode: os.FileMode(438), modTime: time.Unix(1492311494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl": templatesDotTmpl,
	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,
	"templates/dot_tables.tmpl": templatesDot_tablesTmpl,
	"templates/html.tmpl": templatesHtmlTmpl,
	"templates/pg_ddl.tmpl": templatesPg_ddlTmpl,
	"templates/sqlite3_ddl.tmpl": templatesSqlite3_ddlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dot.tmpl": &bintree{templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": &bintree{templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl": &bintree{templatesDot_tablesTmpl, map[string]*bintree{}},
		"html.tmpl": &bintree{templatesHtmlTmpl, map[string]*bintree{}},
		"pg_ddl.tmpl": &bintree{templatesPg_ddlTmpl, map[string]*bintree{}},
		"sqlite3_ddl.tmpl": &bintree{templatesSqlite3_ddlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

