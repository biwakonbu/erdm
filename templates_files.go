// Code generated by go-bindata.
// sources:
// templates/dot.tmpl
// templates/dot_relations.tmpl
// templates/dot_tables.tmpl
// templates/html.tmpl
// templates/pg_ddl.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\x80\xe1\xbd\xd0\x77\x38\x32\x97\xd2\x51\x90\xcc\xe2\xe0\x24\x4e\x22\x72\xf5\xae\x4d\x20\xbd\x2b\xed\x09\x4a\xc8\xbb\x4b\x11\x27\xe7\xff\x87\x2f\x67\xe2\x21\x0a\x83\x23\x35\x57\x4a\x5d\x51\x1c\x17\x9c\x03\x8c\x90\xeb\x0a\x40\x94\x18\xae\x6b\xc0\x99\x7d\xaf\xaf\x66\xb5\x77\x62\xbf\xe8\x53\x88\xa9\x09\x1c\xc7\x60\xbe\x6b\xbb\x5d\x33\xa8\x98\xe0\xc4\xde\x9d\xce\x70\x39\xc2\x41\x2d\xc4\x87\xbb\xed\xeb\x2a\x67\xe3\x69\x4e\x68\x5f\xe7\x6e\xd8\x27\x5e\x1d\xb4\x1b\xf8\x9f\x17\x4e\x68\x51\xe5\x77\x94\x6d\x61\xa1\x52\x3e\x01\x00\x00\xff\xff\xaa\x9c\xbf\xc1\xaf\x00\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 175, mode: os.FileMode(438), modTime: time.Unix(1485949068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x4b\x03\x41\x0c\x85\xef\x85\xfe\x87\xc7\xb0\x47\x9d\x1f\x20\xd4\x4b\x3d\x7b\xa8\xbd\x89\x48\xea\xa4\x75\x30\xcd\xc0\xec\x14\x91\x90\xff\x2e\xb3\x5d\x58\x05\xc1\x4b\x12\xbe\xe4\x3d\xf2\xcc\x12\x1f\xb3\x32\x42\x2a\xed\xb5\xb2\x50\xcb\x45\xc7\xe0\x6e\x56\x49\x4f\x8c\xe1\xe3\x06\x43\xc3\xdd\x06\x71\x4f\x07\xe1\x71\x59\xc5\x6d\x91\xcb\x59\x27\x92\x8f\x50\x46\xdc\xcd\x0e\xd7\xdb\x47\x3a\xf3\x8e\x49\x10\x82\xfb\x7a\xb5\x5e\x01\x9c\x4e\x8c\xe7\x3e\x01\x54\x6b\xf9\x7c\x67\x4a\xd8\x20\x68\x51\x0e\x57\xde\x91\xd0\x81\xa5\x73\xb3\xc5\x74\x4b\x35\x65\x25\xc9\xed\xeb\xa9\x5c\xea\x1b\xbb\xcf\x92\x46\x59\xfe\x93\x3c\xf0\xd8\xb2\x4e\x78\xd6\xbd\xf4\x62\x36\xb4\xb8\xcf\x4d\xa6\x57\xdd\x71\x7b\x8f\x9f\x0e\xbf\x92\xf4\x18\x66\xac\xa9\x67\xfe\xa3\x7d\x07\x00\x00\xff\xff\xc2\xc9\x2b\x7a\x50\x01\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 336, mode: os.FileMode(438), modTime: time.Unix(1492065615, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6a\xe3\x30\x10\xbd\x2f\xec\x3f\x0c\x22\x87\x04\x36\xce\xb2\xc7\x5d\xdb\xb0\xbb\x10\x30\x85\x10\x42\x72\x2a\xa5\x28\xd6\xd8\x88\x4e\xa4\x54\x56\xd2\x1a\xa1\x7f\x2f\x92\x93\xd8\x49\x5b\x7a\x91\x91\xe7\xbd\x37\x6f\x9e\xc6\x39\x81\x95\x54\x08\x4c\x68\xfb\x68\xf9\x96\xb0\x61\xde\x7f\xff\xe6\x9c\xe1\xaa\x46\x18\xd9\xa7\x1f\x30\xb2\xf0\x3b\x83\x64\x1d\xcb\xa1\x0a\xe0\x5c\xb2\x96\x96\x70\x85\x9c\xbc\x87\x7b\xe2\x5b\x24\xc8\x20\x4d\xa3\x08\x6c\xb5\x11\x68\x32\xf6\x93\x41\x89\x44\x37\xd7\x3d\x17\x42\xaa\x3a\xdc\xf3\xa0\x06\x90\x5a\x93\xa7\x56\x40\xa9\xa9\xd9\x73\x95\xb1\x5f\x2c\x4f\x2b\xad\x2c\x54\xbc\xc4\x8c\xad\x64\x69\xdb\xe9\x3f\x4d\xe2\xcc\x70\x6e\x0a\x9d\x07\xef\x67\x43\x3b\x30\xed\x2c\x02\xa4\xb3\xa0\x90\xa7\x33\x2b\xc2\x61\x06\xcc\xd3\x74\x61\xb8\x32\x0e\xf7\x5f\xd3\x61\xa7\x9a\x0b\xf5\xe4\x87\x93\xac\x55\xc6\x08\x2b\xfb\x65\x63\xef\xbb\x5c\xda\x3d\x7a\x0f\xce\xc9\x0a\xc6\xda\xc0\x58\x69\x0b\xc9\x5f\x22\xfd\xb2\x38\x10\x4d\x20\x29\x9a\x8d\x92\xcf\x07\x9c\xf4\x56\xc7\x9b\xc5\x62\xd2\xeb\x23\x35\x08\xb2\x82\x6b\xea\x00\xfe\x21\xfa\x22\x3c\xd4\x1d\xe2\x94\xf0\xbe\x4b\xc3\x8a\x3c\x1a\x4c\x8a\x66\x69\xe4\x8e\x9b\xf6\x0e\xdb\x9e\xb6\xbc\x21\x9d\xb1\x73\x6d\x50\xd6\xea\x0a\x3b\xff\xac\xc1\xbb\xb4\x65\x88\x5b\x1e\x63\xde\x85\x12\xf8\x1a\x8f\xb0\x52\x85\x73\x23\x79\x8c\xa9\x0d\x34\xc2\x93\xf5\x3f\xc2\x5e\xe5\xf9\xc3\x9f\xb0\x9c\x27\x53\xf1\xf3\x16\x00\x00\xff\xff\xde\x52\x5e\x3c\xc4\x02\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 708, mode: os.FileMode(438), modTime: time.Unix(1492062881, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x8f\xdb\xb8\x15\xbf\xe7\x53\xb0\xec\xa0\x4e\x80\x31\x35\x9e\xa0\x68\xe1\x91\x5d\x14\xc9\x06\x1d\x6c\x30\xdd\x26\x99\xd3\x62\x30\xa0\x25\xda\xe2\x84\x22\xb5\x24\xed\x19\x43\x15\xb0\x18\x01\xbb\x5b\x2c\x02\xe4\xd2\xed\xad\x68\x81\x45\x8b\x34\x87\x1e\xf6\xd2\x05\xfa\x69\xaa\x0e\x76\x3f\x46\x41\xfd\xb1\x65\x5b\xf2\x9f\xb1\x77\x12\xb4\x3d\x59\xa2\x1e\xdf\xef\xc7\xf7\x1e\x1f\xdf\x93\x1c\x86\x2e\xe9\x53\x4e\x00\xf4\xb4\xcf\x20\x68\x46\xd1\x3d\xfb\x47\xae\x70\xf4\x38\x20\xc0\x8c\x75\xef\xd9\xe6\x07\x30\xcc\x07\x1d\x78\x81\x61\xf7\x1e\x00\x00\xd8\x1e\xc1\x6e\x76\x99\xde\x2a\x47\xd2\x40\x03\x25\x9d\x0e\xf4\xb4\x0e\x54\xdb\xb2\xf0\x05\xbe\x42\x03\x21\x06\x8c\xe0\x80\x2a\xe4\x08\x3f\x1d\xb3\x18\xed\x29\xeb\x92\xf4\xfa\x82\x6b\xab\x85\x7e\x8a\x1e\x16\x77\xe8\x42\xc1\xae\x6d\x65\xda\x4a\xea\x19\xe5\x2f\x81\x24\xac\x03\x95\x1e\x33\xa2\x3c\x42\x34\x04\x9e\x24\xfd\x29\x9c\x8f\xaf\x1c\x97\xa3\x9e\x10\x5a\x69\x89\x03\x73\x63\x20\x27\x03\xd6\x43\xf4\x10\xfd\xcc\x72\x94\x9a\x8e\x21\x9f\x72\xe4\x28\x05\x4b\x60\x3e\xd1\x18\x38\x1e\x96\x8a\xe8\x0e\x3c\x7d\xf1\xa4\xf9\xf3\x62\xd5\xd6\x74\xd9\x76\x4f\xb8\x63\xc0\x07\x4d\x1c\x04\x1d\x88\x83\xa0\xac\xc2\xa5\x23\xf3\xc8\x11\x5c\x4b\xc1\x18\x91\x1d\xf8\x02\xf7\x18\x79\x34\x19\x28\x49\x4f\x66\x38\x0c\x2b\xd5\x81\x1c\x8f\x7a\x58\x82\xec\xa7\x49\xf9\x88\x48\x45\x20\x90\x82\x91\xf4\x21\x1d\x60\x4d\x05\x9f\xd3\x30\xaf\xc5\x60\x63\xca\x17\x90\xea\x11\x9b\x3d\x89\xb9\x0b\xbb\x61\x08\xc3\x90\x48\x17\x71\xec\x93\x28\x82\x51\x64\x5b\x2e\x1d\xad\xad\xc6\x11\x8c\xe1\x40\x11\x50\x5c\xd4\x30\x48\xa7\xf7\x85\xf4\xe7\xe6\xa7\x43\xf9\xb5\xa4\x03\x4f\x2f\x99\x9f\xea\xa0\x3c\x18\x6a\x60\x42\xb6\x03\x35\xb9\xd2\xd0\xd8\xde\x17\xae\x89\x97\x97\x64\x7c\x29\xa4\x0b\x41\xc0\xb0\x43\x3c\xc1\x5c\xe3\x8c\xe7\x04\x4b\xc7\x43\x08\xc1\x02\xdb\x80\x16\xfe\x82\xd6\x12\xc2\x96\x91\xac\xb1\x45\xb5\x99\x2a\x86\xab\x86\xd6\xf4\x5d\x59\x4e\x8a\xcb\x35\xbc\xeb\x08\xd6\xf4\xdd\xe6\x21\x50\xd4\x25\x3d\x5c\x17\x10\xe9\xb4\x21\x2b\x39\xc3\x38\xa1\xb9\x7a\x12\xc8\x76\xa8\x31\xba\x24\x01\xc1\xba\x03\xb5\x09\x76\x40\x39\x48\x2f\x9e\x52\xa5\xc1\x6f\x41\x9f\x32\x4d\x64\xbb\xf0\x48\xd7\xc6\xf9\x0e\xfe\x71\x2a\xd5\x4c\xe3\x2e\xbd\x9c\x46\x5e\x1e\x8d\x73\xa3\xb6\x85\xbb\xb6\xc5\xe8\x32\x37\x0d\xd9\x46\x4e\xaa\x31\x5a\xeb\x60\x99\xb5\xbc\xc3\xee\x07\xcf\x1e\xdb\x96\x77\xb8\x44\x88\xfa\x83\x2c\x2f\x86\x21\x3a\xf6\xf1\x80\x3c\xa1\x8c\xe4\x4b\x01\x97\xd4\xd5\x5e\x07\xb6\x0e\x0e\x0e\x82\xab\xa5\x71\xe7\x1d\x76\x93\xf8\xb3\x24\xfe\x67\x12\x7f\x95\xc4\x6f\xff\xfd\x8f\x4f\xbf\xff\xcb\x5f\x57\x40\x97\xd6\x93\x99\x58\x12\x15\x08\xae\xe8\x68\xd9\x9e\x4c\xa7\x66\x1e\xdc\xd0\xa5\x33\x60\x99\x60\xb3\x27\xa4\x4b\x24\x71\x57\x00\x66\xa0\x26\xa7\xae\x96\xcb\x64\xe5\x7a\x82\x99\xb0\xbb\xbe\x30\x98\x2e\xbf\x62\x39\x4a\x4b\x1a\x10\x77\xf3\xc5\x2d\x42\xac\xbf\xd8\xc5\xb9\xb2\xe0\xa6\x86\x8e\x43\x66\xce\xaf\xcd\x95\x79\x33\x91\x75\xff\xfb\xb7\x5f\x7d\xf7\xfa\xb3\x9b\xd7\xaf\x1e\xd8\x96\xf6\x76\xa8\xf8\xbb\xdf\xbd\xd9\x5a\xb1\x6d\x6d\xe2\xf8\x59\x3a\xb7\x9c\x08\xf2\x08\x2a\x65\x22\x26\x06\xd4\xc1\xec\xbc\x94\x91\x36\x0d\xb1\x79\xed\x36\x06\x46\x5b\xb1\x53\x37\x4d\x86\xb7\x85\xbf\x9d\x3d\x6d\xeb\x16\xd1\x6b\x5b\x29\xf3\xff\xd6\x9d\x48\x79\x5f\x6c\xbb\x0d\xaf\xdf\x26\xf1\x9b\x24\xfe\xd3\xcd\xeb\x57\xbb\xdd\x86\x65\xc5\xbb\xd8\x86\x85\xe2\x9b\x3f\x7e\xb9\xbd\x92\x8f\x3e\xdc\x5e\xc7\xc9\xaf\x5f\x80\x93\xd3\xa7\x4f\xb7\xd7\x74\x7a\x72\xfc\x9b\xd3\x0f\xb6\xd7\xf3\x64\x07\xab\x4a\xe2\xcf\x93\xf8\xf7\xc9\xf5\x9b\x24\x7e\x9b\xc4\x5f\xdc\x7c\xfa\xf5\x2e\x62\xe1\x9b\x24\xfe\x73\x12\x7f\x93\xc4\x5f\xbc\xa3\x3c\x5c\xae\x2b\x1c\xc1\x86\x3e\x9f\x14\x16\x28\xbb\x3f\x67\x54\xad\xaa\xfb\x97\x83\xb8\x20\x6d\x15\x3b\xf0\xd2\xa3\x9a\x34\x55\x80\x1d\xd2\x06\x5c\x5c\x4a\x1c\x1c\xe5\x99\x34\xc3\xfa\x01\xb2\xf9\xfa\xd8\xef\x02\xd3\x74\x4a\xbb\xc5\x34\x5d\x57\x13\x33\x3a\xe0\x6d\xe0\x10\xae\x89\x9c\x83\xa4\xea\x3c\x78\x49\xc6\xe0\x17\xa0\xf1\xaf\x3f\x7c\xd9\x00\x6d\xd0\x68\xdc\x3d\x05\x2e\xf4\x39\x1f\x32\xf6\x8e\x69\x0c\x39\xfd\x64\x48\x7e\x40\x12\xd5\x21\x60\xab\x00\x73\xb3\xf5\x68\xbf\xd8\x76\x48\x12\x96\xbe\x4c\x38\x4f\x37\x1f\xec\x36\x7f\x32\xd0\x47\x95\x8d\x59\xe5\x84\x72\x59\x52\x2f\x90\x55\x28\x06\x7d\x8b\x42\x65\xad\x25\x96\x89\xb8\xa4\x8f\x87\x4c\xdf\xa9\x65\xa7\x49\xcd\xf7\x09\xd7\x26\xab\xe5\x6c\xf2\x91\x3c\xaf\xe5\x3c\xd3\xa1\x8c\x60\x4f\x5a\xdb\xdb\xe8\xff\xc5\xdc\x7b\x55\xcc\x7d\x9d\x1e\xb2\x9f\x27\x71\x9c\x5c\xff\x3d\xb9\xfe\xf6\xe6\xf5\xab\x1d\x96\x72\x49\xfc\xb7\xe4\xfa\xdb\xad\x0e\x71\xb0\xe3\x92\xe7\x3d\x2b\x2d\x28\x77\xc9\xd5\xb4\xb2\x48\x6f\xef\xa6\xb0\x48\xa1\x90\xa6\x9a\xdd\xdd\xe1\x9e\x61\x66\xe9\x46\xdd\xd5\xa1\x96\x81\xbe\x07\x67\x5a\x45\xe6\x2d\x0c\xf2\x3f\x9e\x78\xd7\x5f\xd5\x7a\xab\x58\x8b\xf5\x4a\x96\xcb\x5e\xc3\xde\xf6\x35\xfa\xfc\xed\xe6\x1f\xa5\x30\x1f\x0c\x19\x96\x17\xca\x6a\xa1\x43\xf4\xf0\xb0\x18\x48\x3f\x13\xd5\x7c\x9b\xca\x51\xa6\x9f\x1f\xac\x0b\x3c\xc2\xd9\xe8\x5c\xa2\x99\x68\x13\xee\x90\x91\xfb\x0d\x1c\x04\x8d\x7d\xf0\xf1\xd9\x83\x19\x29\x34\xfd\x6c\x74\xbf\x31\xf7\xd9\xc8\x88\x37\xf6\x94\x23\x02\xd2\xd8\x07\xfd\x21\x77\x4c\xad\x05\xee\x67\x43\x0f\x40\xb8\x60\xb6\xec\x09\x9a\xbe\xb5\xed\x80\x8f\x17\x84\xc2\xb0\x09\x24\xe6\x03\x02\xf6\xe8\x3e\xd8\xd3\xa0\xdd\x01\x28\x85\x56\x51\x54\xe1\xa4\x10\x9a\xbe\x05\xb6\x01\x0c\xc3\x3d\x8d\x5e\x98\x44\xf7\x8c\x60\x16\x45\x70\xbf\xca\xa7\xb0\xdc\x62\xcd\x4e\xab\x9d\x52\x4a\xd7\xed\x0a\xca\x73\xac\x0d\x6d\x3a\x32\xbc\xf7\x34\x3a\x36\x53\x6b\xa8\x83\x10\xa6\x79\x39\x67\x41\x47\x2b\x68\xe4\x09\x35\x13\x9f\xa0\x39\x29\x12\x1d\xa1\x47\x45\xbe\x35\xba\xa8\x13\x45\x86\x16\xe1\x6e\xfd\xb2\x8a\x5c\x39\x25\x70\xac\x4e\xd3\x11\x93\x90\x2a\x27\xe5\x1a\xab\x1e\x9d\x2d\x63\xbd\xae\xf5\x1c\x63\x3d\x27\x37\xde\x64\x45\x95\x9b\x73\xc6\xf3\xce\x6a\xcf\x57\xfb\xde\x59\x6e\x74\x00\xa0\xd9\x4e\x53\xe1\xac\x61\xad\x93\xcd\x9b\x4b\xd8\x06\xa9\xf4\xb1\xfa\x48\x52\x1f\xcb\xf1\x87\x64\x1c\x55\x1b\x74\xce\x0f\xf9\xb4\xc2\x0b\xfb\x61\x48\xfb\x00\xfd\x0a\xab\xc7\x59\x0f\xf1\x9c\x68\x4d\xf9\xa0\xc6\x24\x00\xe6\xad\xc6\x84\xef\xe3\x49\xeb\xb1\xbf\xc4\x75\x19\x89\xa2\x27\x2d\x68\xfc\x92\x31\x71\x79\x32\x64\xac\xcc\xe3\x59\xde\x54\xd5\x2a\x9a\x74\x5d\x7d\x29\xfc\x09\x8f\x62\x1a\x7a\x84\xa5\x4b\x39\x66\x54\x8f\x9f\x8b\xa1\x74\x96\x59\x73\xda\xc0\x89\xa5\x8a\x1e\x13\xa5\x29\xcf\x69\xad\xa1\x2d\x6d\x30\x17\x14\xa6\x49\xe6\x04\xfb\x93\x20\xca\x0d\x36\x59\xfa\xa3\xe2\xb0\xae\x01\x98\x39\xdf\x6b\x42\x7d\x36\xd8\xb3\x68\xcf\xc2\xdd\x41\xb9\x7e\x53\x31\x19\x66\x4e\xfa\x9b\x52\x38\xcb\x7f\xeb\x42\xa8\x10\x8b\x0a\xce\x67\x47\xf7\xea\xd2\x2f\x91\x2e\xe8\x54\x64\xe7\x74\x09\xd3\x8d\x31\xd9\x16\x0b\x82\xd1\xd1\xcc\x50\x34\x8b\x74\xf6\xe0\xa8\x74\x0a\xd6\x1d\x51\x1b\x1c\x84\x17\x9f\x0c\x89\x1c\x5b\x2d\xd4\x6a\xa1\x56\x7e\xb7\xc6\x21\x38\x83\xb0\xce\x1f\x32\x0e\xd1\x81\x75\x31\xff\x7f\x8c\x45\x0c\xdb\xca\x4a\x0e\xdb\xca\xfe\x93\x92\x1b\xfc\x3f\x01\x00\x00\xff\xff\x79\xde\x13\x02\xbf\x22\x00\x00")

func templatesHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlTmpl,
		"templates/html.tmpl",
	)
}

func templatesHtmlTmpl() (*asset, error) {
	bytes, err := templatesHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html.tmpl", size: 8895, mode: os.FileMode(438), modTime: time.Unix(1492062881, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPg_ddlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xea\x40\x10\x7d\x17\xfc\x0f\x83\xe4\x41\xc1\x9b\x1f\x70\xe5\x3e\xe4\x26\xab\x0d\xa6\xd1\xe6\x03\xf4\xa9\xa4\xc9\x28\x0b\xeb\x6a\xcd\x86\x2a\xcb\xfc\xf7\xb2\x9b\x68\x53\xfa\xf1\x16\x32\xe7\x9c\x39\xe7\xcc\x6a\x5d\xe1\x8e\x4b\x84\xd1\x69\xff\x5c\x55\x62\x04\x7f\x88\x86\x03\xad\xcf\x85\xdc\x23\x38\x8a\x4f\xc1\x51\xf0\xf7\x1f\xb8\x59\xf1\x22\xb0\x6e\xe7\x41\xb2\x5a\x43\xe6\xfd\x8f\x18\x84\x73\x60\x9b\x30\xcd\x52\xd0\xda\x51\x6e\xc6\x95\xc0\x04\x0b\x41\x04\xbe\x97\xfa\x5e\xc0\x66\x46\x0f\x65\xf5\xbb\xb0\x99\xfa\x09\xf3\x32\xd6\x09\x7f\x91\x1b\xf7\xe8\xa5\xa1\x97\x96\xee\x1f\x45\x73\x90\x35\x11\x00\x18\x52\xf9\x89\xd4\xfe\xb8\x9e\x90\x48\x6b\xbe\x03\xa7\x74\xc3\x3a\x97\xfc\xb5\x41\x22\xc8\xe3\xf0\x29\x67\x9d\x3b\x3b\x97\x47\x65\x30\x9e\x10\xc7\xb7\xb8\x11\x46\x22\x5e\x65\x10\xe7\x51\xd4\x87\x39\xa5\xfb\x50\xd4\x01\xee\x8a\x46\xa8\x14\x95\xe2\x72\x4f\x04\x01\x9b\x7b\x79\x94\xb5\x5b\xbb\xa9\x61\x58\xe2\xb4\xd7\x83\xf1\xba\x4e\xc2\x47\x2f\xd9\xc2\x92\x6d\x61\x6c\xd3\x2e\x50\xad\xcf\xfc\x50\x9c\xaf\x4b\xbc\xde\x73\x4d\x86\x83\xc9\xac\x97\x9d\x9b\xec\xbc\xba\x98\xf4\x8e\x72\x43\x59\xe1\xe5\x76\x98\xb6\xc1\xd6\x22\xaf\x2e\x3f\x66\x85\x30\x0e\xd8\xc6\xf8\x34\x28\x5b\x18\x11\xac\xe2\x6f\x5a\xef\x30\x0b\x54\x76\xd3\x87\xad\xdb\x5d\x6f\x4f\xe6\x7e\x62\xfb\xf1\x1e\x00\x00\xff\xff\xba\x44\xdb\x58\x5a\x02\x00\x00")

func templatesPg_ddlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPg_ddlTmpl,
		"templates/pg_ddl.tmpl",
	)
}

func templatesPg_ddlTmpl() (*asset, error) {
	bytes, err := templatesPg_ddlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pg_ddl.tmpl", size: 602, mode: os.FileMode(438), modTime: time.Unix(1487831781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl": templatesDotTmpl,
	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,
	"templates/dot_tables.tmpl": templatesDot_tablesTmpl,
	"templates/html.tmpl": templatesHtmlTmpl,
	"templates/pg_ddl.tmpl": templatesPg_ddlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dot.tmpl": &bintree{templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": &bintree{templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl": &bintree{templatesDot_tablesTmpl, map[string]*bintree{}},
		"html.tmpl": &bintree{templatesHtmlTmpl, map[string]*bintree{}},
		"pg_ddl.tmpl": &bintree{templatesPg_ddlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

