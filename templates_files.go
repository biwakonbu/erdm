// Code generated by go-bindata.
// sources:
// templates/dot.tmpl
// templates/dot_relations.tmpl
// templates/dot_tables.tmpl
// templates/html.tmpl
// templates/pg_ddl.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\x80\xe1\xbd\xd0\x77\x38\x32\x97\xd2\x51\x90\xcc\xe2\xe0\x24\x4e\x22\x72\xf5\xae\x4d\x20\xbd\x2b\xed\x09\x4a\xc8\xbb\x4b\x11\x27\xe7\xff\x87\x2f\x67\xe2\x21\x0a\x83\x23\x35\x57\x4a\x5d\x51\x1c\x17\x9c\x03\x8c\x90\xeb\x0a\x40\x94\x18\xae\x6b\xc0\x99\x7d\xaf\xaf\x66\xb5\x77\x62\xbf\xe8\x53\x88\xa9\x09\x1c\xc7\x60\xbe\x6b\xbb\x5d\x33\xa8\x98\xe0\xc4\xde\x9d\xce\x70\x39\xc2\x41\x2d\xc4\x87\xbb\xed\xeb\x2a\x67\xe3\x69\x4e\x68\x5f\xe7\x6e\xd8\x27\x5e\x1d\xb4\x1b\xf8\x9f\x17\x4e\x68\x51\xe5\x77\x94\x6d\x61\xa1\x52\x3e\x01\x00\x00\xff\xff\xaa\x9c\xbf\xc1\xaf\x00\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 175, mode: os.FileMode(438), modTime: time.Unix(1485949068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x4b\x03\x41\x0c\x85\xef\x85\xfe\x87\xc7\xb0\x47\x9d\x1f\x20\xd4\x4b\x3d\x7b\xa8\xbd\x89\x48\xea\xa4\x75\x30\xcd\xc0\xec\x14\x91\x90\xff\x2e\xb3\x5d\x58\x05\xc1\x4b\x12\xbe\xe4\x3d\xf2\xcc\x12\x1f\xb3\x32\x42\x2a\xed\xb5\xb2\x50\xcb\x45\xc7\xe0\x6e\x56\x49\x4f\x8c\xe1\xe3\x06\x43\xc3\xdd\x06\x71\x4f\x07\xe1\x71\x59\xc5\x6d\x91\xcb\x59\x27\x92\x8f\x50\x46\xdc\xcd\x0e\xd7\xdb\x47\x3a\xf3\x8e\x49\x10\x82\xfb\x7a\xb5\x5e\x01\x9c\x4e\x8c\xe7\x3e\x01\x54\x6b\xf9\x7c\x67\x4a\xd8\x20\x68\x51\x0e\x57\xde\x91\xd0\x81\xa5\x73\xb3\xc5\x74\x4b\x35\x65\x25\xc9\xed\xeb\xa9\x5c\xea\x1b\xbb\xcf\x92\x46\x59\xfe\x93\x3c\xf0\xd8\xb2\x4e\x78\xd6\xbd\xf4\x62\x36\xb4\xb8\xcf\x4d\xa6\x57\xdd\x71\x7b\x8f\x9f\x0e\xbf\x92\xf4\x18\x66\xac\xa9\x67\xfe\xa3\x7d\x07\x00\x00\xff\xff\xc2\xc9\x2b\x7a\x50\x01\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 336, mode: os.FileMode(438), modTime: time.Unix(1492065615, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x8b\xdb\x30\x10\x86\xef\x85\xfe\x87\x41\xe4\x90\x40\xed\x94\x1e\x5b\xdb\xd0\x16\x02\xa6\x10\x42\x48\x4e\xa5\x14\xc5\x1a\x1b\xd1\x89\x94\xca\x4a\x76\x8d\xd0\x7f\x5f\x24\x27\xb1\x93\xfd\xba\x48\x48\x9a\xf7\xd5\x33\x1f\xce\x09\xac\xa5\x42\x60\x42\xdb\xbf\x96\xef\x08\x5b\xe6\xfd\xc7\x0f\xce\x19\xae\x1a\x84\x89\xfd\xf7\x09\x26\x16\xbe\xe6\x90\x6e\xe2\x73\x78\x05\x70\x2e\xdd\x48\x4b\xb8\x46\x4e\xde\xc3\x6f\xe2\x3b\x24\xc8\x21\xcb\xa2\x09\xec\xb4\x11\x68\x72\xf6\x99\x41\x85\x44\x77\xc7\x03\x17\x42\xaa\x26\x9c\x8b\xe0\x06\x90\x59\x53\x64\x56\x40\xa5\xa9\x3d\x70\x95\xb3\x2f\xac\xc8\x6a\xad\x2c\xd4\xbc\xc2\x9c\xad\x65\x65\xbb\xe4\x87\x26\x71\x51\x38\x97\x80\xac\x41\x21\xf4\x24\xc0\x98\xf7\x17\x2c\xef\xe7\xce\xa1\x12\xc3\x4d\x00\x85\xa4\x87\x07\xc8\xe6\xc1\xbb\xc8\xe6\x56\x84\xc5\x8c\x3c\xcf\x79\x87\xb4\xab\x98\xf6\x4f\x4d\xc7\xbd\x6a\xaf\xd2\x33\x29\x27\xd9\xa8\x9c\x11\xd6\xf6\x1d\xa4\x04\xde\x82\xf2\xbe\xaf\x66\x77\x40\xef\xc1\x39\x59\xc3\x54\x1b\x98\x2a\x6d\x21\xfd\x4e\xa4\x1f\x96\x47\xa2\x19\xa4\x65\xbb\x55\xf2\xff\x11\x67\x43\x1a\xd3\xed\x72\x39\x1b\xfe\x46\x6a\x31\x02\xdc\x48\x47\xe1\x2f\x46\x5f\x8d\xc7\xbe\xe3\xb8\x40\xdc\x57\xca\x8a\x22\x02\xa6\x65\xbb\x32\x72\xcf\x4d\xf7\x0b\xbb\x41\xb6\xba\x13\x5d\x62\x17\xda\xa0\x6c\xd4\x4d\xec\xe2\xb5\x0f\x9e\x75\x42\x86\x56\xc8\x53\xec\x45\xa9\x04\x3e\xc6\x25\x0c\x62\xe9\xdc\x44\x9e\x62\xd5\x46\x1e\xa1\x9d\xc3\x45\x98\xc6\xa2\xf8\xf3\x2d\x8c\xf4\x19\x2a\x6e\x4f\x01\x00\x00\xff\xff\xfb\xb5\x10\x5b\xfa\x02\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 762, mode: os.FileMode(438), modTime: time.Unix(1492066554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xe3\xb8\x11\x7f\xcf\xa7\x60\x79\xc1\x39\x01\x62\x2a\x4e\x7a\xb8\xd6\x91\x5d\x14\xc9\x2d\x1a\x5c\x90\x6e\x77\x93\xa7\x43\x10\xd0\x14\x6d\x31\x4b\x91\x5a\x92\x76\x62\xa8\xfa\xee\x05\x49\xc9\x96\x6d\xc9\x7f\xe2\x6c\xba\xd8\xf6\xc9\x12\x35\x9c\xdf\x8f\x33\xc3\xe1\x8c\xe4\x2c\x8b\xe8\x90\x09\x0a\x60\x6c\x12\x0e\x41\x3b\xcf\x0f\xc2\x3f\x45\x92\x98\x69\x4a\x81\x1d\xeb\x1f\x84\xf6\x07\x70\x2c\x46\x3d\xf8\x84\x61\xff\x00\x00\x00\xc2\x98\xe2\xc8\x5f\xba\x5b\x4d\x14\x4b\x0d\xd0\x8a\xf4\x60\x6c\x4c\xaa\xbb\x41\x80\x9f\xf0\x0b\x1a\x49\x39\xe2\x14\xa7\x4c\x23\x22\x13\x37\x16\x70\x36\xd0\xc1\x33\x1d\x0c\xa5\x30\x41\x07\xfd\x82\xce\xcb\x3b\xf4\xa4\x61\x3f\x0c\xbc\xb6\x8a\x7a\xce\xc4\x17\xa0\x28\xef\x41\x6d\xa6\x9c\xea\x98\x52\x03\x41\xac\xe8\x70\x0e\x97\xe0\x17\x12\x09\x34\x90\xd2\x68\xa3\x70\x6a\x6f\x2c\xe4\x6c\x20\x38\x47\xe7\xe8\xd7\x80\x68\x3d\x1f\x43\x09\x13\x88\x68\x0d\x2b\x60\x09\x35\x18\x90\x18\x2b\x4d\x4d\x0f\xde\xdf\x7d\x68\xff\xa5\x5c\x75\x30\x5f\x76\x38\x90\xd1\x14\x88\x51\x1b\xa7\x69\x0f\xe2\x34\xad\xaa\x88\xd8\xc4\x3e\x22\x52\x18\x25\x39\xa7\xaa\x07\xef\xf0\x80\xd3\xcb\xd9\x40\x45\x7a\x36\x83\x70\xac\x75\x0f\x0a\x3c\x19\x60\x05\xfc\x4f\x9b\x89\x09\x55\x9a\x42\xa0\x24\xa7\xee\x21\x1b\x61\xc3\xa4\x58\xd2\xb0\xac\xc5\x62\x63\x26\x56\x90\x9a\x11\xdb\x03\x85\x45\x04\xfb\x59\x06\xb3\x8c\xaa\x08\x09\x9c\xd0\x3c\x87\x79\x1e\x06\x11\x9b\x6c\xad\x86\x48\xce\x71\xaa\x29\x28\x2f\x1a\x18\xb8\xe9\x43\xa9\x92\xa5\xf9\x6e\xa8\xb8\x56\x6c\x14\x9b\x35\xf3\x9d\x0e\x26\xd2\xb1\x01\x36\x64\x7b\xd0\xd0\x17\x03\xad\xed\x13\x19\xd9\x78\xf9\x42\xa7\xcf\x52\x45\x10\xa4\x1c\x13\x1a\x4b\x1e\x59\x67\x7c\xa6\x58\x91\x18\x21\x04\x4b\x6c\x0b\x5a\xfa\x0b\x06\x6b\x08\x07\x56\xb2\xc1\x16\xf5\x66\xaa\x19\xae\x1b\xda\xd2\x77\x55\x39\x25\x9f\xb7\xf0\x2e\x91\xbc\x9d\x44\xed\x33\xa0\x59\x44\x07\xb8\x29\x20\xdc\xb4\x31\xaf\x38\xc3\x3a\xa1\xbd\x79\x12\xf0\x3b\xd4\x1a\x5d\xd1\x94\x62\xd3\x83\xc6\x06\x3b\x60\x02\xb8\x8b\x1b\xa6\x0d\xf8\x37\x18\x32\x6e\xa8\xea\x96\x1e\xe9\x87\xb8\xd8\xc1\x3f\x39\xa9\xb6\x8b\x3b\x77\x39\x8f\xbc\x22\x1a\x97\x46\xc3\x00\xf7\xc3\x80\xb3\x75\x6e\x1a\xf3\x9d\x9c\xd4\x60\xb4\xce\xe9\x3a\x6b\xc5\x67\xfd\xdf\x3e\x5d\x85\x41\x7c\xb6\x46\x88\x25\x23\x9f\x17\xb3\x0c\x5d\x27\x78\x44\x3f\x30\x4e\x8b\xa5\x80\x67\x16\x99\xb8\x07\x3b\xa7\xa7\xa7\xe9\xcb\xda\xb8\x8b\xcf\xfa\x2e\x85\x00\x6b\xcd\x0d\x90\x95\x75\x78\xd3\x2a\xaa\x53\x29\x34\x9b\xac\xdb\x8b\x6e\xaa\xf7\xdc\x8e\xae\x5c\x00\xf3\x82\xed\x81\x54\x11\x55\x34\xda\x00\xe8\x41\x6d\x2e\xdd\x2c\xe7\x65\xd5\x76\x82\x5e\x38\xda\x5e\x18\xcc\x97\x5f\xb3\x1c\x6d\x14\x4b\x69\xb4\xfb\xe2\x56\x21\xb6\x5f\xec\xea\x5c\x55\x72\xd3\x63\x42\xe8\xc2\xb9\xb5\xbb\xb2\xb8\x88\xa8\x5b\x9c\xd0\xa3\x1b\x39\x62\x04\x73\x77\x73\x1c\x06\x26\x7e\x33\xcd\x1f\xe3\xa9\x7e\x0b\xd5\x61\xb0\x8b\xef\x17\x09\xbd\x72\x22\x28\x82\xa8\x92\x84\xb8\xb7\xd3\x63\x25\x19\xed\x1a\x65\xcb\xda\x43\x0c\xac\xb6\x72\xb3\xee\x9a\x07\x5f\x0b\xff\x3a\x7b\x86\xc1\x2b\x02\x38\x0c\x1c\xf3\x1f\x75\x33\x32\x31\x94\x7b\xee\xc4\x4b\xc9\xc7\x89\xf8\x26\x5b\xb1\xaa\xba\xdc\x8b\x6f\xb1\xc3\xa7\x29\xdd\x5f\xcb\xc7\xdf\xf7\xd7\x71\xfb\xcf\x3b\x70\x7b\x7f\x73\xb3\xbf\xa6\xfb\xdb\xeb\x7f\xdd\xff\xb6\xbf\x9e\x0f\x6f\xb0\xaa\x2b\x3a\xc4\x63\x6e\xde\xc2\xff\x49\x42\xc5\x1e\x8a\xf6\x4a\xbc\xd5\x5a\x82\xf8\x48\x2c\x8b\x09\xe4\xef\x1f\x39\xd3\x9b\x6a\xfc\xf5\x20\x11\x70\x6d\x61\x0f\x3e\xc7\xcc\xd0\xb6\x4e\x31\xa1\x5d\x20\xe4\xb3\xc2\xe9\x45\x91\x3a\x3d\xd6\x37\x48\xdf\xdb\x63\xff\x37\x30\x6d\x57\xf4\xb6\x98\xb6\xc3\x6a\x63\xce\x46\xa2\x0b\x08\x15\x86\xaa\x25\x48\xa6\x1f\xd3\x2f\x74\x0a\xfe\x06\x5a\x3f\xff\xf4\xd7\x5f\xff\xfc\xcb\x45\x0b\x74\x41\xab\xf5\xfe\x34\x84\x34\x8f\x62\xcc\xf9\x77\x40\x65\x2c\xd8\xd7\x31\xfd\xc6\x44\xea\xc3\x21\xd4\x29\x16\x76\x1b\xb2\x61\xb9\x05\x91\xa2\xdc\xbd\x44\x78\x74\x1b\x11\xf6\xdb\x3f\x8f\xcc\x45\x6d\x43\x56\x3b\xa1\x5a\x93\x34\x0b\xf8\xf2\xc4\xa2\xef\x51\xa5\x6c\xb5\xc4\x2a\x91\xc8\xe7\xcd\x77\xb5\xec\x3c\xc1\xb9\x54\x6b\x33\x5c\xc1\xa6\x18\x29\x72\x5c\xc1\xd3\x0d\x79\x82\x03\x15\xec\x6f\xa3\xff\x57\x72\xdf\x51\x25\x77\x2d\x22\xfa\xe2\xaa\xad\x37\x2b\xdd\x7c\xcb\xbf\x77\x71\xe3\x52\xd0\x8f\x54\x4f\x30\x67\xea\x59\x39\xe1\x6e\xdf\xa7\x9a\x70\x50\xc8\x30\xc3\xdf\xef\x44\xf7\x98\x3e\xaf\xe8\xf7\x3a\xc1\x3c\xe8\x77\x72\x80\xd5\xa4\xd9\xd2\x28\xff\xe3\x59\x76\xfb\x55\x6d\xb7\x8a\xad\x58\x6f\x64\xb9\xee\x5d\xeb\x6b\xdf\x95\x2f\xdf\xee\xfe\xe5\x09\x8b\xd1\x98\x63\xf5\xa4\x83\x0e\x3a\x43\xe7\x67\xe5\x80\xfb\x16\xd4\xf0\x01\xaa\x40\x99\x7f\x63\x08\x9e\xf0\x04\xfb\xd1\xa5\x64\x33\xd3\x26\xa3\x31\xa7\x47\x2d\x9c\xa6\xad\x13\xf0\xc7\xc3\xf1\x82\x14\x9a\x7f\x1b\x3a\x6a\x2d\x7d\x1b\xb2\xe2\xad\x43\x4d\x64\x4a\x5b\x27\x60\x38\x16\xc4\x16\x56\xe0\xc8\x0f\x1d\x83\x6c\xc5\x6c\xfe\x09\x9a\xbf\xa2\xed\x81\x3f\x56\x84\xb2\xac\x0d\x14\x16\x23\x0a\x0e\xd9\x09\x38\x34\xa0\xdb\x03\xc8\x41\xeb\x3c\xaf\x71\x52\x06\x6d\xc3\x02\xbb\x00\x66\xd9\xa1\x41\x77\x36\xd9\x7d\xa2\x98\xe7\x39\x3c\xa9\xf3\x29\xac\xf6\x56\x8b\xd3\x1a\xa7\x54\x52\x76\xb7\x86\xf2\x12\x6b\x4b\x9b\x4d\x2c\xef\x43\x83\xdc\x39\xdb\x40\x1d\x64\xd0\xe5\xe6\x82\x05\x9b\x6c\xa0\x51\x24\x55\x2f\x3e\x43\x23\x0e\x89\x4d\xd0\x65\x99\x73\xad\x2e\x46\xf2\xdc\xd2\xa2\x22\x6a\x5e\x56\x99\x2f\xe7\x04\xae\xb5\x3f\x7f\x6d\x42\xaa\x9d\x54\x68\xac\x7b\xf4\xb0\x8e\xf5\xb6\xd6\x23\xd6\x7a\xa4\x30\xde\x6c\x45\xb5\x9b\x73\xc1\xf3\x64\xb3\xe7\xeb\x7d\x4f\xd6\x1b\x1d\x00\x68\xb7\xd3\x5c\xd8\x77\xaa\x4d\xb2\x45\x57\x09\xbb\xc0\x49\x5f\xeb\x8f\x8a\x25\x58\x4d\x7f\xa7\xd3\xbc\xde\xa0\x4b\x7e\x28\xa6\x95\x5e\x38\xc9\x32\x36\x04\xe8\x1f\x58\x17\x2f\x5a\x3e\x53\x63\x98\x18\x35\x98\x04\xc0\xa2\xaf\x98\xf1\xbd\x9a\xf5\x19\x27\x6b\x5c\xe7\x49\x94\x8d\x68\x49\xe3\xef\x9c\xcb\xe7\xdb\x31\xe7\x55\x1e\x9f\x8a\x0e\xaa\x51\xd1\xac\xc5\x1a\x2a\x99\xcc\x78\x94\xd3\xd0\x25\x56\x11\x13\x98\x33\x33\xfd\x2c\xc7\x8a\xac\xb3\xe6\xbc\x5b\x93\x6b\x15\x5d\x51\x6d\x98\x28\x68\x6d\xa1\xcd\x75\x93\x2b\x0a\x5d\x92\xb1\x15\x71\x19\x44\x85\xc1\x66\x4b\xbf\x2c\x0f\xeb\x06\x80\x85\xf3\xbd\x21\xd4\x17\x83\xdd\x47\xbb\x0f\x77\x82\x0a\xfd\xb6\x6a\xb2\xcc\x88\xfb\x75\x14\x1e\x8a\xdf\xa6\x10\x2a\xc5\xf2\x92\xf3\xc3\xc5\x41\x53\xfa\xa5\x2a\x02\xbd\x9a\xec\xec\x96\x30\xdf\x18\xb3\x6d\xb1\x22\x98\x5f\x2c\x0c\xe5\x8b\x48\x0f\xc7\x17\x95\x53\xb0\xe9\x88\xda\xe1\x20\x7c\xfa\x3a\xa6\x6a\x1a\x74\x50\xa7\x83\x3a\xc5\xdd\x16\x87\xe0\x02\xc2\x36\xff\xba\x38\x43\xa7\xc1\xd3\xf2\x9f\x2e\x56\x31\xc2\xc0\x97\x1c\x61\xe0\xff\x78\x52\x18\xfc\x3f\x01\x00\x00\xff\xff\xff\x36\xed\xbf\xa4\x22\x00\x00")

func templatesHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlTmpl,
		"templates/html.tmpl",
	)
}

func templatesHtmlTmpl() (*asset, error) {
	bytes, err := templatesHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html.tmpl", size: 8868, mode: os.FileMode(438), modTime: time.Unix(1492066554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPg_ddlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xea\x40\x10\x7d\x17\xfc\x0f\x83\xe4\x41\xc1\x9b\x1f\x70\xe5\x3e\xe4\x26\xab\x0d\xa6\xd1\xe6\x03\xf4\xa9\xa4\xc9\x28\x0b\xeb\x6a\xcd\x86\x2a\xcb\xfc\xf7\xb2\x9b\x68\x53\xfa\xf1\x16\x32\xe7\x9c\x39\xe7\xcc\x6a\x5d\xe1\x8e\x4b\x84\xd1\x69\xff\x5c\x55\x62\x04\x7f\x88\x86\x03\xad\xcf\x85\xdc\x23\x38\x8a\x4f\xc1\x51\xf0\xf7\x1f\xb8\x59\xf1\x22\xb0\x6e\xe7\x41\xb2\x5a\x43\xe6\xfd\x8f\x18\x84\x73\x60\x9b\x30\xcd\x52\xd0\xda\x51\x6e\xc6\x95\xc0\x04\x0b\x41\x04\xbe\x97\xfa\x5e\xc0\x66\x46\x0f\x65\xf5\xbb\xb0\x99\xfa\x09\xf3\x32\xd6\x09\x7f\x91\x1b\xf7\xe8\xa5\xa1\x97\x96\xee\x1f\x45\x73\x90\x35\x11\x00\x18\x52\xf9\x89\xd4\xfe\xb8\x9e\x90\x48\x6b\xbe\x03\xa7\x74\xc3\x3a\x97\xfc\xb5\x41\x22\xc8\xe3\xf0\x29\x67\x9d\x3b\x3b\x97\x47\x65\x30\x9e\x10\xc7\xb7\xb8\x11\x46\x22\x5e\x65\x10\xe7\x51\xd4\x87\x39\xa5\xfb\x50\xd4\x01\xee\x8a\x46\xa8\x14\x95\xe2\x72\x4f\x04\x01\x9b\x7b\x79\x94\xb5\x5b\xbb\xa9\x61\x58\xe2\xb4\xd7\x83\xf1\xba\x4e\xc2\x47\x2f\xd9\xc2\x92\x6d\x61\x6c\xd3\x2e\x50\xad\xcf\xfc\x50\x9c\xaf\x4b\xbc\xde\x73\x4d\x86\x83\xc9\xac\x97\x9d\x9b\xec\xbc\xba\x98\xf4\x8e\x72\x43\x59\xe1\xe5\x76\x98\xb6\xc1\xd6\x22\xaf\x2e\x3f\x66\x85\x30\x0e\xd8\xc6\xf8\x34\x28\x5b\x18\x11\xac\xe2\x6f\x5a\xef\x30\x0b\x54\x76\xd3\x87\xad\xdb\x5d\x6f\x4f\xe6\x7e\x62\xfb\xf1\x1e\x00\x00\xff\xff\xba\x44\xdb\x58\x5a\x02\x00\x00")

func templatesPg_ddlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPg_ddlTmpl,
		"templates/pg_ddl.tmpl",
	)
}

func templatesPg_ddlTmpl() (*asset, error) {
	bytes, err := templatesPg_ddlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pg_ddl.tmpl", size: 602, mode: os.FileMode(438), modTime: time.Unix(1487831781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl": templatesDotTmpl,
	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,
	"templates/dot_tables.tmpl": templatesDot_tablesTmpl,
	"templates/html.tmpl": templatesHtmlTmpl,
	"templates/pg_ddl.tmpl": templatesPg_ddlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dot.tmpl": &bintree{templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": &bintree{templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl": &bintree{templatesDot_tablesTmpl, map[string]*bintree{}},
		"html.tmpl": &bintree{templatesHtmlTmpl, map[string]*bintree{}},
		"pg_ddl.tmpl": &bintree{templatesPg_ddlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

