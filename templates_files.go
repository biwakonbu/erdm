// Code generated by go-bindata.
// sources:
// templates/dot.tmpl
// templates/dot_relations.tmpl
// templates/dot_tables.tmpl
// templates/html.tmpl
// templates/pg_ddl.tmpl
// templates/sqlite3_ddl.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x8a\xc3\x30\x0c\x80\xe1\x3d\x90\x77\x10\x9e\x43\xc8\x78\x70\x78\xba\x2d\x07\xc7\x41\xc7\x52\x8a\x82\x94\xd8\xe0\x48\x21\x56\xa1\xc5\xf8\xdd\x4b\x28\x9d\x3a\xff\x3f\x7c\xa5\x10\xcf\x51\x18\x1c\xa9\xb9\x5a\xdb\x86\xe2\xb2\xe3\x16\x60\x81\xd2\x36\x00\xa2\xc4\x70\xce\x01\x37\xf6\x93\xde\xbb\x6c\x8f\xc4\x7e\xd7\x9b\x10\x53\x17\x38\x2e\xc1\xfc\xd0\x0f\x5f\xdd\xac\x62\x82\x2b\x7b\xf7\xa7\xa6\x70\x42\xc9\xf0\x33\xfe\xc2\xf8\xef\x2e\xdf\x6d\x53\x8a\xf1\xba\x25\xb4\x97\x75\x35\x9c\x12\x67\x07\xfd\x81\x7e\xe6\x9d\x13\x5a\x54\x79\x1f\xf5\x58\x58\xa8\xd6\x67\x00\x00\x00\xff\xff\x0c\x4e\xf9\x86\xb3\x00\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 179, mode: os.FileMode(438), modTime: time.Unix(1495717249, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcf\x4a\x03\x31\x10\xc6\xef\x85\xbe\xc3\x47\xd8\xc3\x2e\xb8\x79\x00\xa1\x5e\xaa\x57\x0f\xb5\xe0\x41\x44\xa6\x66\xda\x06\xd3\x09\x64\x67\x11\x09\x79\x77\x49\x77\xc1\x16\x84\x5e\x92\xf0\x23\xbf\x6f\xfe\xe4\xec\x78\xef\x85\x61\x5c\xd4\x8f\xc4\x81\xd4\x47\x19\x4c\x29\xcb\x45\xce\x3d\x12\xc9\x81\xd1\x7c\xdd\xa1\x51\xdc\xaf\x60\xb7\xb4\x0b\x3c\xa0\xbf\xfe\x60\xd7\x31\x8c\x27\xb9\xe0\x7e\x8f\x96\xc4\xa1\x15\x86\xdd\xcc\xb9\x93\xfd\x4c\x27\xde\x30\x05\x18\xd3\xa1\x95\xa8\xb0\xaf\x5e\x8f\x71\xd4\xa7\xe4\xba\x0e\x35\x62\xb9\x00\xd8\x1d\x18\x6f\xf5\x05\x50\x4a\xf1\xfb\xc8\xe4\xb0\x82\x91\x28\x6c\x26\x5e\x51\xa0\x1d\x87\xca\x73\xfe\xab\xb4\xa6\xe4\xbc\x50\xf0\xfa\xf3\x12\xc7\xf4\xc9\xa5\xcc\x8a\x92\x0f\xb7\x94\x47\x1e\xd4\xcb\x19\xcf\xde\x7b\x3d\x72\x6e\xd4\x6e\xbd\x86\x73\xff\xa5\xa0\x7f\xc0\x65\xc2\xd5\x78\xd3\x26\x58\x5c\x29\xff\x5e\xbf\x01\x00\x00\xff\xff\xb8\xff\xfa\xf2\x7b\x01\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 379, mode: os.FileMode(438), modTime: time.Unix(1496315351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x5d\x8b\xd4\x30\x14\x86\xef\x05\xff\xc3\x21\xcc\xc5\x0e\xd8\x8e\x78\xa9\x6d\x41\xc5\x85\x22\x0c\xcb\xb2\x8b\x17\x22\x92\x69\x4e\x6b\xf0\x4c\x32\xa6\xe9\x68\x09\xf9\xef\x92\xb4\x9d\xc9\x8c\x1f\x7b\x13\x48\x72\xde\xf7\x3c\xe7\xc3\x39\x81\xad\x54\x08\x4c\x68\xfb\xd5\xf2\x1d\x61\xcf\xbc\x7f\xfe\xcc\x39\xc3\x55\x87\xb0\xb2\xdf\x5f\xc0\xca\xc2\xeb\x12\xf2\x87\xf8\x1d\x7e\x01\x9c\xcb\x1f\xa4\x25\xbc\x47\x4e\xde\xc3\x67\xe2\x3b\x24\x28\xa1\x28\xa2\x09\xec\xb4\x11\x68\x4a\xf6\x92\x41\x83\x44\x57\xd7\x03\x17\x42\xaa\x2e\xdc\xab\xe0\x06\x50\x58\x53\x15\x56\x40\xa3\xa9\x3f\x70\x55\xb2\x57\xac\x2a\x5a\xad\x2c\xb4\xbc\xc1\x92\xdd\xcb\xc6\x8e\xd9\x3b\x4d\x62\x51\x38\x97\x81\x6c\x41\x21\x4c\x24\xc0\x98\xf7\x0b\x96\xf7\x1b\xe7\x50\x89\xf3\x4b\x00\x85\x6c\x82\x07\x28\x36\xc1\xbb\x2a\x36\x56\x84\xc3\x24\x9e\x73\xdd\xa1\xec\x26\x96\xfd\x5e\xd3\xb0\x57\xfd\x22\x9d\xf3\xde\x28\x6d\x21\xff\x24\xed\x37\x3d\xd8\x0f\x46\xac\x13\xf3\xb9\x16\x4e\xb2\x53\x25\x23\x6c\xed\x13\xd0\x19\xfc\x0f\xdb\xfb\xa9\xdf\xe3\x01\xbd\x07\xe7\x42\x76\xae\xc4\x8c\xf0\x96\x48\xff\xdc\x0e\x44\x6b\xc8\xeb\xfe\x51\xc9\x1f\x03\x26\x30\x37\x8f\xdb\xed\xfa\x9c\x1c\xa9\xc7\x48\x70\x21\x4d\xc2\xff\x1a\x7d\x32\x4e\x7d\xd3\xb8\x80\x3c\x35\xd3\x8a\x2a\x12\xe6\x75\x7f\x67\xe4\x9e\x9b\xf1\x23\x8e\x67\xd9\xdd\x95\x68\x89\xbd\xd5\x06\x65\xa7\x2e\x62\x6f\xff\x95\xe0\x8f\x61\xc9\x30\x2d\x79\x8c\xe3\xaa\x95\xc0\x5f\xf1\x08\xbb\x5a\x3b\xb7\x92\xc7\xd8\xb6\xc4\x23\x4c\xfc\xd4\xe8\xe5\x3d\xec\x6d\x55\x7d\x79\x13\x96\x3f\xfd\xfa\x1d\x00\x00\xff\xff\x09\xa5\x8b\xe1\x24\x03\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 804, mode: os.FileMode(438), modTime: time.Unix(1496315417, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\xe0\x71\x83\x75\x02\xc4\x54\x93\xec\x62\xb7\x8e\xec\xc3\x21\x69\x71\x41\x83\x5c\xaf\x4d\x9e\x8a\x20\xa0\x29\xda\x62\x4a\x91\x2a\x49\x3b\x31\x74\xfa\xee\x07\x92\x92\x2d\xdb\x92\xff\xc4\x69\xae\xe8\xed\x93\x25\x6a\x38\xbf\x1f\x67\x86\xc3\x19\xc9\x59\x16\xd1\x01\x13\x14\xc0\xd8\x24\x1c\x82\x76\x9e\xef\x85\x7f\x8b\x24\x31\x93\x94\x02\x3b\xd6\xdb\x0b\xed\x0f\xe0\x58\x0c\xbb\xf0\x01\xc3\xde\x1e\x00\x00\x84\x31\xc5\x91\xbf\x74\xb7\x9a\x28\x96\x1a\xa0\x15\xe9\xc2\xd8\x98\x54\x77\x82\x00\x3f\xe0\x27\x34\x94\x72\xc8\x29\x4e\x99\x46\x44\x26\x6e\x2c\xe0\xac\xaf\x83\x47\xda\x1f\x48\x61\x82\x63\xf4\x3b\x3a\x2d\xef\xd0\x83\x86\xbd\x30\xf0\xda\x2a\xea\x39\x13\x5f\x81\xa2\xbc\x0b\xb5\x99\x70\xaa\x63\x4a\x0d\x04\xb1\xa2\x83\x19\x5c\x82\x9f\x48\x24\x50\x5f\x4a\xa3\x8d\xc2\xa9\xbd\xb1\x90\xd3\x81\xe0\x14\x9d\xa2\x3f\x02\xa2\xf5\x6c\x0c\x25\x4c\x20\xa2\x35\xac\x80\x25\xd4\x60\x40\x62\xac\x34\x35\x5d\x78\x7b\xf3\xbe\xfd\x67\xb9\xea\x60\xb6\xec\xb0\x2f\xa3\x09\x10\xc3\x36\x4e\xd3\x2e\xc4\x69\x5a\x55\x11\xb1\xb1\x7d\x44\xa4\x30\x4a\x72\x4e\x55\x17\xde\xe0\x3e\xa7\xe7\xd3\x81\x8a\xf4\x74\x06\xe1\x58\xeb\x2e\x14\x78\xdc\xc7\x0a\xf8\x9f\x36\x13\x63\xaa\x34\x85\x40\x49\x4e\xdd\x43\x36\xc4\x86\x49\xb1\xa0\x61\x51\x8b\xc5\xc6\x4c\x2c\x21\x35\x23\xb6\xfb\x0a\x8b\x08\xf6\xb2\x0c\x66\x19\x55\x11\x12\x38\xa1\x79\x0e\xf3\x3c\x0c\x22\x36\xde\x58\x0d\x91\x9c\xe3\x54\x53\x50\x5e\x34\x30\x70\xd3\x07\x52\x25\x0b\xf3\xdd\x50\x71\xad\xd8\x30\x36\x2b\xe6\x3b\x1d\x4c\xa4\x23\x03\x6c\xc8\x76\xa1\xa1\x4f\x06\x5a\xdb\x27\x32\xb2\xf1\xf2\x95\x4e\x1e\xa5\x8a\x20\x48\x39\x26\x34\x96\x3c\xb2\xce\xf8\x4c\xb1\x22\x31\x42\x08\x96\xd8\x16\xb4\xf4\x17\x0c\x56\x10\x0e\xac\x64\x83\x2d\xea\xcd\x54\x33\x5c\x37\xb4\xa1\xef\xaa\x72\x4a\x3e\x6e\xe0\x5d\x22\x79\x3b\x89\xda\xbf\x01\xcd\x22\xda\xc7\x4d\x01\xe1\xa6\x8d\x78\xc5\x19\xd6\x09\xed\xf5\x93\x80\xdf\xa1\xd6\xe8\x8a\xa6\x14\x9b\x2e\x34\x36\xd8\x01\x13\xc0\x5d\x5c\x31\x6d\xc0\x7f\xc0\x80\x71\x43\x55\xa7\xf4\x48\x2f\xc4\xc5\x0e\xfe\xc5\x49\xb5\x5d\xdc\xb9\xcb\x59\xe4\x15\xd1\xb8\x30\x1a\x06\xb8\x17\x06\x9c\xad\x72\xd3\x88\x6f\xe5\xa4\x06\xa3\xfd\xb9\xca\x58\xf1\x49\xef\xdd\xa7\x8b\x30\x88\x4f\x56\x08\xb1\x64\xe8\xd3\x62\x96\xa1\xcb\x04\x0f\xe9\x7b\xc6\x69\xb1\x12\xf0\xc8\x22\x13\x77\xe1\xdb\x37\x6f\xd2\xa7\x95\x51\x17\x9f\xf4\x5c\x02\x01\xd6\x96\x6b\x10\x2b\xab\xf0\x86\x55\x54\xa7\x52\x68\x36\xb6\x5b\x72\x75\x56\x98\x2a\xf1\x1e\xdc\xd2\xa5\x73\xb0\x5e\xb0\xdd\x97\x2a\xa2\x8a\x46\x6b\x00\x3d\xa8\xcd\xa9\xeb\xe5\xbc\xac\xda\x4c\xd0\x0b\x47\x9b\x0b\x83\xd9\xf2\x6b\x96\xa3\x8d\x62\x29\x8d\xb6\x5f\xdc\x32\xc4\xe6\x8b\x5d\x9e\xab\x4a\x6e\x7a\x44\x08\x9d\x3b\xbf\xb6\x57\x16\x17\xb1\x75\x8d\x13\x7a\x70\x25\x87\x8c\x60\xee\x6e\x0e\xc3\xc0\xc4\x2f\xa6\xf9\x63\x3c\xd1\x2f\xa1\x3a\x0c\xb6\xf1\xfd\x3c\xa1\x67\x4e\x04\x45\x10\x55\x92\x11\xf7\x76\xba\xaf\x24\xa5\x6d\xa3\x6c\x51\x7b\x88\x81\xd5\x56\x6e\xdb\x6d\xf3\xe1\x73\xe1\x9f\x67\xcf\x30\x78\x46\x00\x87\x81\x63\xfe\xb3\x6e\x46\x26\x06\x72\xc7\x9d\x78\x2e\xf9\x28\x11\xdf\x65\x2b\x56\x55\x97\x7b\xf1\x25\x76\xf8\x24\xa5\xbb\x6b\xf9\xf8\x61\x77\x1d\xd7\xff\xba\x01\xd7\xb7\x57\x57\xbb\x6b\xba\xbd\xbe\xfc\xf7\xed\xbb\xdd\xf5\xbc\x7f\x81\x55\x5d\xd0\x01\x1e\x71\xf3\x12\xfe\x4f\x12\x2a\x76\x50\xb4\x53\xe2\xad\xd6\x12\xc4\x47\x62\x59\x4c\x20\x7f\x7f\xcf\x99\x5e\x57\xeb\xaf\x06\x89\x80\x6b\x0f\xbb\xf0\x31\x66\x86\xb6\x75\x8a\x09\xed\x00\x21\x1f\x15\x4e\xcf\x8a\xd4\xe9\xb1\xbe\x43\xfa\xde\x1c\xfb\x7f\x81\x69\xbb\xa3\x97\xc5\xb4\x9d\x56\x1b\x73\x36\x14\x1d\x40\xa8\x30\x54\x2d\x40\x32\x7d\x9f\x7e\xa5\x13\xf0\x77\xd0\xfa\xf5\x97\xb7\x7f\xfc\xf6\xfb\x59\x0b\x74\x40\xab\xf5\xfa\x34\xc4\x88\x73\x4b\xc3\xe1\x97\x5c\x5e\x9f\xc6\x48\xb0\x6f\x23\xfa\x9d\xed\x51\x1f\x0a\xa1\x4e\xb1\xb0\x5b\x90\x0d\xca\xed\x87\x14\xe5\xee\x45\xc2\xbd\xdb\x84\xb0\xd7\xfe\x75\x68\xce\x6a\x9b\xb2\xda\x09\xd5\x7a\xa4\x59\xc0\x97\x26\x16\x7d\x87\x0a\x65\xa3\x25\x56\x89\x44\x3e\x67\xbe\xaa\x65\x67\xc9\xcd\xa5\x59\x9b\xdd\x0a\x36\xc5\x48\x91\xdf\x0a\x9e\x6e\xc8\x13\xec\xab\x60\x77\x1b\xfd\x55\xc5\xfd\x40\x55\xdc\xa5\x88\xe8\x93\xab\xb4\x5e\xac\x6c\xf3\x8d\xff\xce\x85\x8d\x4b\x41\x3f\x53\x2d\xc1\x9c\xa9\xa7\xa5\x84\xbb\x7d\x9d\x4a\xc2\x41\x21\xc3\x0c\x7f\xbd\xd3\xdc\x63\xfa\xbc\xa2\x5f\xeb\x04\xf3\xa0\x3f\xc8\x01\x56\x93\x66\x4b\xa3\xfc\x9f\x67\xd9\xcd\x57\xb5\xd9\x2a\x36\x62\xbd\x96\xe5\xaa\xf7\xad\xcf\x7d\x5f\xbe\x78\xbb\xfd\xd7\x27\x2c\x86\x23\x8e\xd5\x83\x0e\x8e\xd1\x09\x3a\x3d\x29\x07\xdc\xf7\xa0\x86\x8f\x50\x05\xca\xec\x3b\x43\xf0\x80\xc7\xd8\x8f\x2e\x24\x9b\xa9\x36\x19\x8d\x38\x3d\x68\xe1\x34\x6d\x1d\x81\x2f\x77\x87\x73\x52\x68\xf6\x7d\xe8\xa0\xb5\xf0\x7d\xc8\x8a\xb7\xf6\x35\x91\x29\x6d\x1d\x81\xc1\x48\x10\x5b\x58\x81\x03\x3f\x74\x08\xb2\x25\xb3\xf9\x27\x68\xf6\x7a\xb6\x0b\xbe\x2c\x09\x65\x59\x1b\x28\x2c\x86\x14\xec\xb3\x23\xb0\x6f\x40\xa7\x0b\x90\x83\xd6\x79\x5e\xe3\xa4\x0c\xda\x66\x05\x76\x00\xcc\xb2\x7d\x83\x6e\x6c\xb2\xfb\x44\x31\xcf\x73\x78\x54\xe7\x53\x58\xed\xab\xe6\xa7\x35\x4e\xa9\xa4\xec\x4e\x0d\xe5\x05\xd6\x96\x36\x1b\x5b\xde\xfb\x06\xb9\x73\xb6\x81\x3a\xc8\xa0\xcb\xcd\x05\x0b\x36\x5e\x43\xa3\x48\xaa\x5e\x7c\x8a\x46\x1c\x12\x1b\xa3\xf3\x32\xe7\x5a\x5d\x8c\xe4\xb9\xa5\x45\x45\xd4\xbc\xac\x32\x5f\xce\x08\x5c\x6a\x7f\xfe\xda\x84\x54\x3b\xa9\xd0\x58\xf7\xe8\x6e\x15\xeb\x4d\xad\x47\xac\xf5\x48\x61\xbc\xe9\x8a\x6a\x37\xe7\x9c\xe7\xc9\x7a\xcf\xd7\xfb\x9e\xac\x36\x3a\x00\xd0\x6e\xa7\x99\xb0\xef\x52\x9b\x64\x8b\x8e\x12\x76\x80\x93\xbe\xd4\x1f\x15\x4b\xb0\x9a\x7c\xa0\x93\xbc\xde\xa0\x0b\x7e\x28\xa6\x95\x5e\x38\xca\x32\x36\x00\xe8\x9f\x58\x17\x2f\x59\x3e\x53\x63\x98\x18\x36\x98\x04\xc0\xa2\xaf\x98\xf2\xbd\x98\xf6\x19\x47\x2b\x5c\xe7\x49\xd8\x26\xb4\xa4\xf0\x0f\xce\xe5\xe3\xf5\x88\xf3\x2a\x87\x4f\x45\xf7\xd4\xa8\x64\xda\x5e\x0d\x94\x4c\xa6\x1c\xca\x69\xe8\x1c\xab\x88\x09\xcc\x99\x99\x7c\x96\x23\x45\x56\x59\x72\xd6\xa9\xc9\x95\x8a\x2e\xa8\x36\x4c\x14\xb4\x36\xd0\xe6\x3a\xc9\x25\x85\x2e\xc1\xd8\x6a\xb8\x0c\xa0\xc2\x58\xd3\xa5\x9f\x97\x07\x75\x03\xc0\xdc\xd9\xde\x10\xe6\xf3\x81\xee\x23\xdd\x87\x3a\x41\x85\x7e\x5b\x31\x59\x66\xc4\xfd\x3a\x0a\x77\xc5\x6f\x53\xf8\x94\x62\x79\xc9\xf9\xee\x6c\xaf\x29\xf5\x52\x15\x81\x6e\x4d\x66\x76\x4b\x98\x6d\x8a\xe9\x96\x58\x12\xcc\xcf\xe6\x86\xf2\x79\xa4\xbb\xc3\xb3\xca\x09\xd8\x74\x3c\x6d\x71\x08\x3e\x7c\x1b\x51\x35\x09\x8e\xd1\xf1\x31\x3a\x2e\xee\x36\x38\x00\xe7\x10\x36\xf9\xd7\xc5\x09\x7a\x13\x3c\x2c\xfe\xe9\x62\x19\x23\x0c\x7c\xb9\x11\x06\xfe\x8f\x27\x85\xc1\xff\x1b\x00\x00\xff\xff\xf3\xf1\xfc\x06\xa4\x22\x00\x00")

func templatesHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlTmpl,
		"templates/html.tmpl",
	)
}

func templatesHtmlTmpl() (*asset, error) {
	bytes, err := templatesHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html.tmpl", size: 8868, mode: os.FileMode(438), modTime: time.Unix(1495719130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPg_ddlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xea\x40\x10\x7d\x17\xfc\x0f\x83\xe4\x41\xc1\x9b\x1f\x70\xe5\x3e\xe4\x26\xab\x0d\xa6\xd1\xe6\x03\xf4\xa9\xa4\xc9\x28\x0b\xeb\x6a\xcd\x86\x2a\xcb\xfc\xf7\xb2\x9b\x68\x53\xfa\xf1\x16\x32\xe7\x9c\x39\xe7\xcc\x6a\x5d\xe1\x8e\x4b\x84\xd1\x69\xff\x5c\x55\x62\x04\x7f\x88\x86\x03\xad\xcf\x85\xdc\x23\x38\x8a\x4f\xc1\x51\xf0\xf7\x1f\xb8\x59\xf1\x22\xb0\x6e\xe7\x41\xb2\x5a\x43\xe6\xfd\x8f\x18\x84\x73\x60\x9b\x30\xcd\x52\xd0\xda\x51\x6e\xc6\x95\xc0\x04\x0b\x41\x04\xbe\x97\xfa\x5e\xc0\x66\x46\x0f\x65\xf5\xbb\xb0\x99\xfa\x09\xf3\x32\xd6\x09\x7f\x91\x1b\xf7\xe8\xa5\xa1\x97\x96\xee\x1f\x45\x73\x90\x35\x11\x00\x18\x52\xf9\x89\xd4\xfe\xb8\x9e\x90\x48\x6b\xbe\x03\xa7\x74\xc3\x3a\x97\xfc\xb5\x41\x22\xc8\xe3\xf0\x29\x67\x9d\x3b\x3b\x97\x47\x65\x30\x9e\x10\xc7\xb7\xb8\x11\x46\x22\x5e\x65\x10\xe7\x51\xd4\x87\x39\xa5\xfb\x50\xd4\x01\xee\x8a\x46\xa8\x14\x95\xe2\x72\x4f\x04\x01\x9b\x7b\x79\x94\xb5\x5b\xbb\xa9\x61\x58\xe2\xb4\xd7\x83\xf1\xba\x4e\xc2\x47\x2f\xd9\xc2\x92\x6d\x61\x6c\xd3\x2e\x50\xad\xcf\xfc\x50\x9c\xaf\x4b\xbc\xde\x73\x4d\x86\x83\xc9\xac\x97\x9d\x9b\xec\xbc\xba\x98\xf4\x8e\x72\x43\x59\xe1\xe5\x76\x98\xb6\xc1\xd6\x22\xaf\x2e\x3f\x66\x85\x30\x0e\xd8\xc6\xf8\x34\x28\x5b\x18\x11\xac\xe2\x6f\x5a\xef\x30\x0b\x54\x76\xd3\x87\xad\xdb\x5d\x6f\x4f\xe6\x7e\x62\xfb\xf1\x1e\x00\x00\xff\xff\xba\x44\xdb\x58\x5a\x02\x00\x00")

func templatesPg_ddlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPg_ddlTmpl,
		"templates/pg_ddl.tmpl",
	)
}

func templatesPg_ddlTmpl() (*asset, error) {
	bytes, err := templatesPg_ddlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pg_ddl.tmpl", size: 602, mode: os.FileMode(438), modTime: time.Unix(1487831781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSqlite3_ddlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x4e\xc2\x40\x10\xbd\xf7\x2b\x26\xa4\x07\x48\xb0\x17\x6f\x12\x0f\x95\x2e\xd8\x50\x0b\x96\x36\x81\x93\xa9\xed\x40\x36\x59\x16\xa1\xdb\x08\xd9\xcc\xbf\x9b\xdd\xae\xa0\x46\x3d\x35\xe9\xbc\xf7\xe6\xbd\x37\xab\x75\x8d\x1b\x2e\x11\x7a\xcd\x41\x70\x85\xb7\x2f\x75\x2d\x7a\x70\x43\xe4\x69\x7d\x2c\xe5\x16\xc1\x57\x7c\x08\xbe\x82\xbb\x7b\x08\xf2\xf2\x55\x60\x63\xc7\x51\x36\x5f\x40\x1e\x3e\x24\x0c\xe2\x09\xb0\x55\xbc\xcc\x97\xa0\xb5\xaf\x82\x9c\x2b\x81\x19\x96\x82\x68\xe4\x69\x8d\xb2\xfe\x57\x8d\xc8\x1b\x67\x2c\xcc\x99\x53\xfb\xa9\x01\xfd\x2b\xb9\x32\xe4\xca\x92\xc7\x7b\xd1\xee\x64\x43\x04\x00\x86\x53\x7d\xe3\x74\x3f\xce\x6f\x48\xa4\x35\xdf\x80\x5f\x05\x71\x53\x48\x7e\x68\x91\x08\x8a\x34\x7e\x2e\x98\xb3\x66\xe7\x72\xaf\x0c\x26\x14\x62\xff\x9e\xb6\xc2\x48\xa4\xf3\x1c\xd2\x22\x49\xbe\xc2\xfc\x2a\x78\x2c\x9b\x08\x37\x65\x2b\xd4\x12\x95\xe2\x72\x4b\x04\x11\x9b\x84\x45\x92\x77\x5b\xdd\xd4\x30\x2c\x71\x78\xe9\xc0\x38\x5d\x64\xf1\x53\x98\xad\x61\xc6\xd6\xd0\xb7\x51\xa7\xa8\x16\x47\xbe\x2b\x8f\xe7\x19\x9e\x2f\xa9\x06\xde\x60\x74\xcd\xcd\x4d\x6e\x5e\x9f\x4c\x72\x5f\x05\xb1\xac\xf1\xe4\xee\xd0\x75\xd7\xb9\xe3\xf5\xe9\xcf\x98\x10\xa7\x11\x5b\x19\x8b\x06\x65\xbb\x22\x82\x79\xfa\x4b\xdf\x0e\x33\x45\x65\x17\x5d\x3d\xb9\x73\xba\xe7\xf1\x79\x58\xfb\xfd\x08\x00\x00\xff\xff\xd3\x08\x8b\x86\x49\x02\x00\x00")

func templatesSqlite3_ddlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSqlite3_ddlTmpl,
		"templates/sqlite3_ddl.tmpl",
	)
}

func templatesSqlite3_ddlTmpl() (*asset, error) {
	bytes, err := templatesSqlite3_ddlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sqlite3_ddl.tmpl", size: 585, mode: os.FileMode(438), modTime: time.Unix(1492311494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl": templatesDotTmpl,
	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,
	"templates/dot_tables.tmpl": templatesDot_tablesTmpl,
	"templates/html.tmpl": templatesHtmlTmpl,
	"templates/pg_ddl.tmpl": templatesPg_ddlTmpl,
	"templates/sqlite3_ddl.tmpl": templatesSqlite3_ddlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dot.tmpl": &bintree{templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": &bintree{templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl": &bintree{templatesDot_tablesTmpl, map[string]*bintree{}},
		"html.tmpl": &bintree{templatesHtmlTmpl, map[string]*bintree{}},
		"pg_ddl.tmpl": &bintree{templatesPg_ddlTmpl, map[string]*bintree{}},
		"sqlite3_ddl.tmpl": &bintree{templatesSqlite3_ddlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

